---
source: codegen-bindings-generator/src/python/generator.rs
expression: format_code(&output).unwrap()
---
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct RustFile {
    path: PathBuf,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl RustFile {
    pub fn new(
        path: PathBuf,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { path, codebase }
    }
    fn file<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
        let codebase = self.codebase.get(py);
        if let codegen_sdk_analyzer::ParsedFile::Rust(file) = codebase
            .get_file(&self.path)
            .unwrap()
        {
            Ok(file)
        } else {
            Err(
                pyo3::exceptions::PyValueError::new_err(
                    format!("File not found at {}", self.path.display()),
                ),
            )
        }
    }
}
#[pymethods]
impl RustFile {
    #[getter]
    pub fn path(&self) -> &PathBuf {
        &self.path
    }
    #[getter]
    pub fn content(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let codebase = self.codebase.get(py);
        let file = self.file(py)?.root(codebase.db());
        Ok(file.source())
    }
    #[getter]
    pub fn content_bytes(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
        let codebase = self.codebase.get(py);
        let file = self.file(py)?.root(codebase.db());
        Ok(pyo3_bytes::PyBytes::new(file.text()))
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<String> {
        Ok(self.content(py)?.to_string())
    }
    #[getter]
    pub fn classes(&self, py: Python<'_>) -> PyResult<Vec<Class>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.classes(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Class::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_class(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Class>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.classes(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Class::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn functions(&self, py: Python<'_>) -> PyResult<Vec<Function>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.functions(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Function::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_function(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Function>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.functions(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Function::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn interfaces(&self, py: Python<'_>) -> PyResult<Vec<Interface>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.interfaces(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Interface::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_interface(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Interface>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.interfaces(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Interface::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn macros(&self, py: Python<'_>) -> PyResult<Vec<Macro>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.macros(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Macro::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_macro(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Macro>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.macros(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Macro::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn methods(&self, py: Python<'_>) -> PyResult<Vec<Method>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.methods(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Method::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_method(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Method>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.methods(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Method::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn modules(&self, py: Python<'_>) -> PyResult<Vec<Module>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.modules(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Module::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_module(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Module>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.modules(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Module::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn calls(&self, py: Python<'_>) -> PyResult<Vec<Call>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.calls(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Call::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_call(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Call>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.calls(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Call::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn implementation_refs(
        &self,
        py: Python<'_>,
    ) -> PyResult<Vec<ImplementationRef>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.implementations(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| ImplementationRef::new(
                        node.fully_qualified_name(db),
                        idx,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_implementation_ref(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<ImplementationRef>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.implementations(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        ImplementationRef::new(
                            nodes[0].fully_qualified_name(db),
                            0,
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn symbols(&self, py: Python<'_>) -> PyResult<Vec<Symbol>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.symbols(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Symbol::new(
                        py.clone(),
                        node.fully_qualified_name(db),
                        idx,
                        node,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_symbol(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Symbol>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.definitions(db);
        let subcategory = category.symbols(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Symbol::new(
                            py.clone(),
                            nodes[0].fully_qualified_name(db),
                            0,
                            &nodes[0],
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.references(db);
        let nodes = subcategory
            .values()
            .map(|values| {
                values
                    .into_iter()
                    .enumerate()
                    .map(|(idx, node)| Reference::new(
                        py.clone(),
                        node.fully_qualified_name(db),
                        idx,
                        node,
                        self.codebase.clone(),
                    ))
            })
            .flatten()
            .collect();
        Ok(nodes)
    }
    #[pyo3(signature = (name, optional = false))]
    pub fn get_reference(
        &self,
        py: Python<'_>,
        name: String,
        optional: bool,
    ) -> PyResult<Option<Reference>> {
        let file = self.file(py)?;
        let db = self.codebase.get(py).db();
        let category = file.references(db);
        let subcategory = category.references(db);
        let res = subcategory.get(&name);
        if let Some(nodes) = res {
            if nodes.len() == 1 {
                Ok(
                    Some(
                        Reference::new(
                            py.clone(),
                            nodes[0].fully_qualified_name(db),
                            0,
                            &nodes[0],
                            self.codebase.clone(),
                        ),
                    ),
                )
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "Ambiguous symbol {} found {} possible matches", name, nodes
                            .len()
                        ),
                    ),
                )
            }
        } else {
            if optional {
                Ok(None)
            } else {
                Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!("No symbol {} found", name),
                    ),
                )
            }
        }
    }
}
mod cst {
    use pyo3::prelude::*;
    use std::sync::Arc;
    use pyo3::sync::GILProtected;
    use codegen_sdk_resolution::CodebaseContext;
    use codegen_sdk_common::traits::CSTNode;
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AbstractType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AbstractType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AbstractType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<AbstractTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AbstractTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAmpersand {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAmpersand {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAmpersand<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAmpersand {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAmpersandAmpersand {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAmpersandAmpersand {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAmpersandAmpersand<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAmpersandAmpersand {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAmpersandEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAmpersandEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAmpersandEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAmpersandEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAs {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAs {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAs<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAs {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAsterisk {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsterisk {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAsterisk<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsterisk {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAsteriskEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsteriskEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAsteriskEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsteriskEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAsteriskSlash {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsteriskSlash {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAsteriskSlash<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsteriskSlash {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAsync {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAsync {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAsync<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAsync {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAt {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAt {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAt<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAt {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousAwait {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousAwait {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousAwait<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousAwait {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousBang {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousBang {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousBang<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousBang {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousBangEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousBangEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousBangEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousBangEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousBlock {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousBlock {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousBlock<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousBlock {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousBreak {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousBreak {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousBreak<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousBreak {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousCaret {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCaret {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousCaret<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCaret {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousCaretEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCaretEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousCaretEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCaretEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousCloseBrace {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCloseBrace {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousCloseBrace<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCloseBrace {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousCloseBracket {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCloseBracket {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousCloseBracket<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCloseBracket {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousCloseParen {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousCloseParen {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousCloseParen<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousCloseParen {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousColon {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousColon {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousColon<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousColon {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousColonColon {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousColonColon {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousColonColon<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousColonColon {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousComma {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousComma {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousComma<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousComma {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousConst {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousConst {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousConst<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousConst {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousContinue {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousContinue {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousContinue<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousContinue {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDefault {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDefault {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDefault<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDefault {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDollar {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDollar {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDollar<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDollar {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDot {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDot {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDot<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDot {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDotDot {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDotDot {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDotDot<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDotDot {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDotDotDot {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDotDotDot {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDotDotDot<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDotDotDot {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDotDotEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDotDotEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDotDotEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDotDotEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDoubleQuote {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDoubleQuote {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDoubleQuote<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDoubleQuote {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousDyn {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousDyn {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousDyn<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousDyn {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousElse {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousElse {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousElse<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousElse {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousEnum {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousEnum {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousEnum<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousEnum {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousEqualsEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousEqualsEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousEqualsEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousEqualsEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousEqualsGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousEqualsGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousEqualsGreaterThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousEqualsGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousExpr {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousExpr {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousExpr<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousExpr {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousExpr2021 {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousExpr2021 {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousExpr2021<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousExpr2021 {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousExtern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousExtern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousExtern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousExtern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousFalse {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousFalse {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousFalse<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousFalse {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousFn {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousFn {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousFn<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousFn {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousFor {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousFor {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousFor<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousFor {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousGen {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGen {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousGen<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGen {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousGreaterThan<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousGreaterThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousGreaterThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousGreaterThanGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThanGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousGreaterThanGreaterThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThanGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousGreaterThanGreaterThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousGreaterThanGreaterThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousGreaterThanGreaterThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousGreaterThanGreaterThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousHash {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousHash {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousHash<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousHash {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousIdent {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousIdent {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousIdent<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousIdent {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousIf {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousIf {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousIf<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousIf {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousImpl {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousImpl {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousImpl<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousImpl {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousIn {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousIn {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousIn<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousIn {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLessThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLessThan<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLessThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLessThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLessThanLessThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThanLessThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLessThanLessThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThanLessThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLessThanLessThanEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLessThanLessThanEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLessThanLessThanEquals<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLessThanLessThanEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLet {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLet {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLet<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLet {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLifetime {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLifetime {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLifetime<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLifetime {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousLoop {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousLoop {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousLoop<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousLoop {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMacroRulesBang {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMacroRulesBang {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMacroRulesBang<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMacroRulesBang {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMatch {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMatch {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMatch<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMatch {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMeta {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMeta {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMeta<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMeta {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMinus {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMinus {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMinus<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMinus {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMinusEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMinusEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMinusEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMinusEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMinusGreaterThan {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMinusGreaterThan {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMinusGreaterThan<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMinusGreaterThan {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMod {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMod {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMod<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMod {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousMove {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousMove {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousMove<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousMove {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousOpenBrace {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousOpenBrace {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousOpenBrace<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousOpenBrace {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousOpenBracket {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousOpenBracket {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousOpenBracket<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousOpenBracket {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousOpenParen {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousOpenParen {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousOpenParen<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousOpenParen {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPat {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPat {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPat<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPat {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPatParam {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPatParam {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPatParam<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPatParam {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPath {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPath {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPath<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPath {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPercent {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPercent {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPercent<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPercent {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPercentEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPercentEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPercentEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPercentEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPipe {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPipe {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPipe<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPipe {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPipeEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPipeEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPipeEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPipeEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPipePipe {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPipePipe {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPipePipe<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPipePipe {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPlus {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPlus {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPlus<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPlus {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPlusEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPlusEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPlusEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPlusEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousPub {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousPub {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousPub<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousPub {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousQuestionMark {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousQuestionMark {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousQuestionMark<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousQuestionMark {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousRaw {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousRaw {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousRaw<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousRaw {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousRef {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousRef {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousRef<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousRef {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousReturn {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousReturn {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousReturn<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousReturn {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousSemicolon {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSemicolon {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousSemicolon<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSemicolon {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousSingleQuote {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSingleQuote {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousSingleQuote<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSingleQuote {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousSlash {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlash {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousSlash<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlash {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousSlashAsterisk {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlashAsterisk {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousSlashAsterisk<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlashAsterisk {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousSlashEquals {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlashEquals {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousSlashEquals<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlashEquals {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousSlashSlash {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousSlashSlash {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousSlashSlash<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousSlashSlash {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousStatic {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousStatic {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousStatic<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousStatic {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousStmt {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousStmt {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousStmt<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousStmt {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousStruct {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousStruct {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousStruct<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousStruct {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousTrait {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousTrait {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousTrait<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousTrait {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousTrue {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousTrue {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousTrue<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousTrue {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousTry {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousTry {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousTry<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousTry {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousTt {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousTt {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousTt<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousTt {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousTy {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousTy {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousTy<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousTy {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousUnderscore {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousUnderscore {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousUnderscore<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousUnderscore {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousUnion {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousUnion {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousUnion<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousUnion {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousUnsafe {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousUnsafe {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousUnsafe<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousUnsafe {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousUse {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousUse {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousUse<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousUse {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousVis {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousVis {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousVis<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousVis {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousWhere {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousWhere {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousWhere<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousWhere {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousWhile {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousWhile {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousWhile<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousWhile {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AnonymousYield {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AnonymousYield {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AnonymousYield<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AnonymousYield {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Arguments {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Arguments {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Arguments<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Arguments {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ArgumentsChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ArgumentsChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ArrayExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ArrayExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ArrayExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ArrayExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ArrayExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ArrayType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ArrayType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayType<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ArrayType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AssignmentExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AssignmentExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AssignmentExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AssociatedType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AssociatedType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AssociatedType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AssociatedType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<AssociatedTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AssociatedTypeChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AsyncBlock {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AsyncBlock {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AsyncBlock<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AsyncBlock {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<AsyncBlockChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AsyncBlockChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Attribute {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Attribute {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Attribute<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Attribute {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<AttributeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AttributeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AttributeItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AttributeItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AttributeItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<AttributeItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AttributeItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct AwaitExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl AwaitExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl AwaitExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<AwaitExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        AwaitExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct BaseFieldInitializer {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BaseFieldInitializer {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializer<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BaseFieldInitializer {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<BaseFieldInitializerChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        BaseFieldInitializerChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct BinaryExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BinaryExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BinaryExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Block {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Block {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Block<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Block {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<BlockChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        BlockChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct BlockComment {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BlockComment {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockComment<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BlockComment {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct BooleanLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BooleanLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::BooleanLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BooleanLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct BoundedType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BoundedType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BoundedType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<BoundedTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        BoundedTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct BracketedType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BracketedType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BracketedType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<BracketedTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        BracketedTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct BreakExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl BreakExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl BreakExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<BreakExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        BreakExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct CallExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl CallExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl CallExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct CapturedPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl CapturedPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl CapturedPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<CapturedPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        CapturedPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct CharLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl CharLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::CharLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl CharLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ClosureExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ClosureExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ClosureExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ClosureParameters {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ClosureParameters {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParameters<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ClosureParameters {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ClosureParametersChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ClosureParametersChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct CompoundAssignmentExpr {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl CompoundAssignmentExpr {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExpr<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl CompoundAssignmentExpr {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ConstBlock {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ConstBlock {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstBlock<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ConstBlock {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ConstItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ConstItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItem<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ConstItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ConstItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ConstItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ConstParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ConstParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ConstParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ContinueExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ContinueExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ContinueExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ContinueExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ContinueExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ContinueExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Crate {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Crate {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Crate<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Crate {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct DeclarationList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DeclarationList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DeclarationList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<DeclarationListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        DeclarationListChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct DocComment {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DocComment {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::DocComment<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DocComment {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct DynamicType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl DynamicType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl DynamicType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ElseClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ElseClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ElseClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ElseClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ElseClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ElseClauseChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct EmptyStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl EmptyStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::EmptyStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl EmptyStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct EnumItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl EnumItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumItem<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl EnumItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<EnumItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        EnumItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct EnumVariant {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl EnumVariant {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariant<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl EnumVariant {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<EnumVariantChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        EnumVariantChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct EnumVariantList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl EnumVariantList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl EnumVariantList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<EnumVariantListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        EnumVariantListChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct EscapeSequence {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl EscapeSequence {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::EscapeSequence<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl EscapeSequence {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ExpressionStatement {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExpressionStatement {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatement<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExpressionStatement {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ExpressionStatementChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExpressionStatementChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ExternCrateDeclaration {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExternCrateDeclaration {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ExternCrateDeclaration<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExternCrateDeclaration {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ExternCrateDeclarationChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExternCrateDeclarationChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ExternModifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ExternModifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ExternModifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ExternModifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ExternModifierChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ExternModifierChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FieldDeclaration {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FieldDeclaration {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclaration<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FieldDeclaration {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<FieldDeclarationChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FieldDeclarationChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FieldDeclarationList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FieldDeclarationList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FieldDeclarationList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<FieldDeclarationListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FieldDeclarationListChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FieldExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FieldExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FieldExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FieldIdentifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FieldIdentifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldIdentifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FieldIdentifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FieldInitializer {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FieldInitializer {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializer<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FieldInitializer {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<FieldInitializerChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FieldInitializerChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FieldInitializerList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FieldInitializerList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FieldInitializerList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<FieldInitializerListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FieldInitializerListChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FieldPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FieldPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FieldPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<FieldPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FieldPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FloatLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FloatLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FloatLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FloatLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ForExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ForExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ForExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ForExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ForExpressionChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ForLifetimes {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ForLifetimes {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ForLifetimes<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ForLifetimes {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ForLifetimesChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ForLifetimesChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ForeignModItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ForeignModItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ForeignModItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ForeignModItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ForeignModItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ForeignModItemChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FragmentSpecifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FragmentSpecifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FragmentSpecifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FragmentSpecifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FunctionItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FunctionItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FunctionItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<FunctionItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FunctionItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FunctionModifiers {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FunctionModifiers {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionModifiers<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FunctionModifiers {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<FunctionModifiersChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FunctionModifiersChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FunctionSignatureItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FunctionSignatureItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FunctionSignatureItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<FunctionSignatureItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FunctionSignatureItemChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct FunctionType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl FunctionType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl FunctionType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<FunctionTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        FunctionTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct GenBlock {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GenBlock {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::GenBlock<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GenBlock {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<GenBlockChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        GenBlockChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct GenericFunction {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GenericFunction {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunction<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GenericFunction {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct GenericPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GenericPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GenericPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<GenericPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        GenericPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct GenericType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GenericType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GenericType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct GenericTypeWithTurbofish {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl GenericTypeWithTurbofish {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeWithTurbofish<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl GenericTypeWithTurbofish {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct HigherRankedTraitBound {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl HigherRankedTraitBound {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBound<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl HigherRankedTraitBound {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Identifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Identifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Identifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Identifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct IfExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl IfExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl IfExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ImplItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ImplItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItem<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ImplItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ImplItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ImplItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct IndexExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl IndexExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl IndexExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<IndexExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        IndexExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct InnerAttributeItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl InnerAttributeItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::InnerAttributeItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl InnerAttributeItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<InnerAttributeItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        InnerAttributeItemChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct InnerDocCommentMarker {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl InnerDocCommentMarker {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::InnerDocCommentMarker<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl InnerDocCommentMarker {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct IntegerLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl IntegerLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::IntegerLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl IntegerLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Label {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Label {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Label<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Label {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<LabelChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        LabelChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct LetChain {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LetChain {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChain<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LetChain {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<LetChainChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        LetChainChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct LetCondition {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LetCondition {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::LetCondition<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LetCondition {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct LetDeclaration {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LetDeclaration {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclaration<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LetDeclaration {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<LetDeclarationChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        LetDeclarationChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Lifetime {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Lifetime {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Lifetime<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Lifetime {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<LifetimeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        LifetimeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct LifetimeParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LifetimeParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::LifetimeParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LifetimeParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct LineComment {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LineComment {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::LineComment<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LineComment {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct LoopExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl LoopExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::LoopExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl LoopExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<LoopExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        LoopExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MacroDefinition {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MacroDefinition {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroDefinition<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MacroDefinition {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<MacroDefinitionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        MacroDefinitionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MacroInvocation {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MacroInvocation {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroInvocation<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MacroInvocation {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<MacroInvocationChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        MacroInvocationChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MacroRule {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MacroRule {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroRule<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MacroRule {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MatchArm {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MatchArm {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArm<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MatchArm {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<MatchArmChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        MatchArmChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MatchBlock {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MatchBlock {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchBlock<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MatchBlock {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<MatchBlockChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        MatchBlockChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MatchExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MatchExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MatchExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MatchPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MatchPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MatchPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<MatchPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        MatchPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Metavariable {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Metavariable {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Metavariable<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Metavariable {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ModItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ModItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ModItem<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ModItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ModItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ModItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MutPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MutPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MutPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<MutPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        MutPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct MutableSpecifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl MutableSpecifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::MutableSpecifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl MutableSpecifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct NegativeLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl NegativeLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::NegativeLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl NegativeLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<NegativeLiteralChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        NegativeLiteralChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct NeverType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl NeverType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::NeverType<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl NeverType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct OrPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl OrPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPattern<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl OrPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<OrPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        OrPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct OrderedFieldDeclarationList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl OrderedFieldDeclarationList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationList<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl OrderedFieldDeclarationList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<OrderedFieldDeclarationListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        OrderedFieldDeclarationListChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct OuterDocCommentMarker {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl OuterDocCommentMarker {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::OuterDocCommentMarker<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl OuterDocCommentMarker {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Parameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Parameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Parameter<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Parameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ParameterChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ParameterChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Parameters {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Parameters {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Parameters<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Parameters {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ParametersChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ParametersChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ParenthesizedExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ParenthesizedExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpression<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ParenthesizedExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ParenthesizedExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ParenthesizedExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct PointerType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl PointerType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl PointerType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<PointerTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        PointerTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct PrimitiveType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl PrimitiveType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::PrimitiveType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl PrimitiveType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct QualifiedType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl QualifiedType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl QualifiedType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct RangeExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RangeExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RangeExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<RangeExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        RangeExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct RangePattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RangePattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RangePattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct RawStringLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RawStringLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::RawStringLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RawStringLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<RawStringLiteralChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        RawStringLiteralChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct RefPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RefPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RefPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<RefPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        RefPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ReferenceExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ReferenceExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ReferenceExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ReferenceExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ReferenceExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ReferencePattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ReferencePattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ReferencePattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ReferencePatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ReferencePatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ReferenceType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ReferenceType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceType<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ReferenceType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<ReferenceTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ReferenceTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct RemainingFieldPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RemainingFieldPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::RemainingFieldPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RemainingFieldPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct RemovedTraitBound {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl RemovedTraitBound {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBound<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl RemovedTraitBound {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<RemovedTraitBoundChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        RemovedTraitBoundChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ReturnExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ReturnExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ReturnExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ReturnExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ReturnExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ScopedIdentifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ScopedIdentifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ScopedIdentifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ScopedTypeIdentifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ScopedTypeIdentifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ScopedTypeIdentifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ScopedUseList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ScopedUseList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseList<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ScopedUseList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct SelfNode {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl SelfNode {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::SelfNode<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl SelfNode {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct SelfParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl SelfParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::SelfParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl SelfParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<SelfParameterChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SelfParameterChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Shebang {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Shebang {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Shebang<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Shebang {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ShorthandFieldIdentifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ShorthandFieldIdentifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ShorthandFieldIdentifier<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ShorthandFieldIdentifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct ShorthandFieldInitializer {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl ShorthandFieldInitializer {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::ShorthandFieldInitializer<
                'db,
            >,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl ShorthandFieldInitializer {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<ShorthandFieldInitializerChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        ShorthandFieldInitializerChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct SlicePattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl SlicePattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl SlicePattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<SlicePatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SlicePatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct SourceFile {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl SourceFile {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFile<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl SourceFile {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<SourceFileChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        SourceFileChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct StaticItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StaticItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StaticItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<StaticItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        StaticItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct StringContent {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StringContent {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::StringContent<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StringContent {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct StringLiteral {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StringLiteral {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::StringLiteral<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StringLiteral {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<StringLiteralChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        StringLiteralChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct StructExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StructExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StructExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct StructItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StructItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItem<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StructItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<StructItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        StructItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct StructPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl StructPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::StructPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl StructPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<StructPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        StructPatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct Super {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl Super {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::Super<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl Super {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TokenBindingPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TokenBindingPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenBindingPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TokenBindingPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TokenRepetition {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TokenRepetition {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetition<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TokenRepetition {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<TokenRepetitionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TokenRepetitionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TokenRepetitionPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TokenRepetitionPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TokenRepetitionPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<TokenRepetitionPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TokenRepetitionPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TokenTree {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TokenTree {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTree<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TokenTree {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TokenTreeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TokenTreeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TokenTreePattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TokenTreePattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TokenTreePattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<TokenTreePatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TokenTreePatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TraitBounds {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TraitBounds {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBounds<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TraitBounds {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TraitBoundsChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TraitBoundsChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TraitItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TraitItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitItem<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TraitItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TraitItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TraitItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TryBlock {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TryBlock {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TryBlock<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TryBlock {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TryBlockChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TryBlockChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TryExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TryExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TryExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TryExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TryExpressionChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TupleExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TupleExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TupleExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<TupleExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TupleExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TuplePattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TuplePattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TuplePattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TuplePatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TuplePatternChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TupleStructPattern {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TupleStructPattern {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPattern<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TupleStructPattern {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<TupleStructPatternChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TupleStructPatternChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TupleType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TupleType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleType<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TupleType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TupleTypeChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TupleTypeChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TypeArguments {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeArguments {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArguments<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeArguments {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TypeArgumentsChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TypeArgumentsChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TypeBinding {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeBinding {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBinding<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeBinding {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TypeCastExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeCastExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeCastExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TypeIdentifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeIdentifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeIdentifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeIdentifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TypeItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItem<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TypeItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TypeItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TypeParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct TypeParameters {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl TypeParameters {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameters<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl TypeParameters {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<TypeParametersChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        TypeParametersChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UnaryExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnaryExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnaryExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<UnaryExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UnaryExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UnionItem {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnionItem {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UnionItem<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnionItem {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UnionItemChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UnionItemChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UnitExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnitExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UnitExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnitExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UnitType {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnitType {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UnitType<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnitType {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UnsafeBlock {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UnsafeBlock {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UnsafeBlock<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UnsafeBlock {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UnsafeBlockChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UnsafeBlockChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UseAsClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UseAsClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UseAsClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UseBounds {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UseBounds {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UseBounds<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UseBounds {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UseBoundsChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UseBoundsChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UseDeclaration {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UseDeclaration {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclaration<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UseDeclaration {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UseDeclarationChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UseDeclarationChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UseList {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UseList {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UseList<'db>> {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UseList {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UseListChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UseListChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct UseWildcard {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl UseWildcard {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::UseWildcard<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl UseWildcard {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<UseWildcardChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        UseWildcardChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct VariadicParameter {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl VariadicParameter {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameter<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl VariadicParameter {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<VariadicParameterChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        VariadicParameterChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct VisibilityModifier {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl VisibilityModifier {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::VisibilityModifier<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl VisibilityModifier {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<VisibilityModifierChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        VisibilityModifierChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct WhereClause {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WhereClause {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::WhereClause<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WhereClause {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(&self, py: Python<'_>) -> PyResult<Vec<WhereClauseChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        WhereClauseChildren::new(py.clone(), id, self.codebase.clone())
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct WherePredicate {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WherePredicate {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicate<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WherePredicate {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct WhileExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl WhileExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl WhileExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<WhileExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        WhileExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[pyclass(module = "codegen_sdk_pink::rust.cst")]
    pub struct YieldExpression {
        id: codegen_sdk_common::CSTNodeTreeId,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    }
    impl YieldExpression {
        pub fn new(
            _py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            Ok(Self { id, codebase })
        }
        fn get_file<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::RustFile<'db>> {
            let codebase = self.codebase.get(py);
            let path = self.id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            Ok(file)
        }
        fn get_node<'db>(
            &'db self,
            py: Python<'db>,
        ) -> PyResult<
            &'db codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpression<'db>,
        > {
            let file = self.get_file(py)?;
            let tree = file.tree(self.codebase.get(py).db());
            let node = tree.get(self.id.id(self.codebase.get(py).db()));
            if let Some(node) = node {
                node.as_ref()
                    .try_into()
                    .map_err(|e| pyo3::exceptions::PyValueError::new_err(
                        format!("Failed to convert node to CSTNode {}", e),
                    ))
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[pymethods]
    impl YieldExpression {
        #[getter]
        pub fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            let node = self.get_node(py)?;
            Ok(node.source())
        }
        #[getter]
        pub fn _source(&self, py: Python<'_>) -> PyResult<std::string::String> {
            self.source(py)
        }
        #[getter]
        pub fn text(&self, py: Python<'_>) -> PyResult<pyo3_bytes::PyBytes> {
            let node = self.get_node(py)?;
            Ok(pyo3_bytes::PyBytes::new(node.text()))
        }
        #[getter]
        pub fn start_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.start_byte())
        }
        #[getter]
        pub fn end_byte(&self, py: Python<'_>) -> PyResult<usize> {
            let node = self.get_node(py)?;
            Ok(node.end_byte())
        }
        #[getter]
        pub fn start_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.start_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn end_position<'a>(
            &'a self,
            py: Python<'a>,
        ) -> PyResult<Bound<'a, pyo3::types::PyTuple>> {
            let node = self.get_node(py)?;
            let position = node.end_position();
            let row = position.row(self.codebase.get(py).db());
            let column = position.column(self.codebase.get(py).db());
            pyo3::types::PyTuple::new(py, vec![row, column])
        }
        #[getter]
        pub fn children(
            &self,
            py: Python<'_>,
        ) -> PyResult<Vec<YieldExpressionChildren>> {
            let file = self.get_file(py)?;
            let db = self.codebase.get(py).db();
            let tree = file.tree(db);
            let children = tree.children(self.id.id(db));
            Ok(
                children
                    .map(|(child, child_id)| {
                        let id = codegen_sdk_common::CSTNodeTreeId::from_node_id(
                            db,
                            &child.id(),
                            child_id,
                        );
                        YieldExpressionChildren::new(
                                py.clone(),
                                id,
                                self.codebase.clone(),
                            )
                            .unwrap()
                    })
                    .collect(),
            )
        }
        fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
            Ok(self.source(py)?)
        }
    }
    #[derive(IntoPyObject)]
    pub enum AbstractTypeChildren {
        BoundedType(BoundedType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
    }
    impl AbstractTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AbstractTypeTrait {
        BoundedType(BoundedType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
    }
    impl AbstractTypeTrait {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeTraitRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeTraitRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeTraitRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeTraitRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeTraitRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeTraitRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AbstractTypeTraitRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ArgumentsChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AttributeItem(AttributeItem),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ArgumentsChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArgumentsChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ArrayExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AttributeItem(AttributeItem),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ArrayExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ArrayTypeChildren {
        AbstractType(AbstractType),
        ArrayExpression(ArrayExpression),
        ArrayType(ArrayType),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        DynamicType(DynamicType),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        FunctionType(FunctionType),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericType(GenericType),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        NeverType(NeverType),
        ParenthesizedExpression(ParenthesizedExpression),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TupleType(TupleType),
        TypeCastExpression(TypeCastExpression),
        TypeIdentifier(TypeIdentifier),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnitType(UnitType),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ArrayTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ArrayTypeChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AssignmentExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl AssignmentExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssignmentExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AssociatedTypeChildren {
        TraitBounds(TraitBounds),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        WhereClause(WhereClause),
    }
    impl AssociatedTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssociatedTypeChildrenRef::TraitBounds(
                        _,
                    ) => {
                        Ok(
                            Self::TraitBounds(
                                TraitBounds::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssociatedTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssociatedTypeChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AssociatedTypeChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AsyncBlockChildren {
        Block(Block),
    }
    impl AsyncBlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AsyncBlockChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AttributeChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        Crate(Crate),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        Super(Super),
        TokenTree(TokenTree),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl AttributeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::TokenTree(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTree(
                                TokenTree::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AttributeItemChildren {
        Attribute(Attribute),
    }
    impl AttributeItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AttributeItemChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum AwaitExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl AwaitExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::AwaitExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BaseFieldInitializerChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl BaseFieldInitializerChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BaseFieldInitializerChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BinaryExpressionChildren {
        AnonymousAmpersand(AnonymousAmpersand),
        AnonymousAmpersandAmpersand(AnonymousAmpersandAmpersand),
        AnonymousAsterisk(AnonymousAsterisk),
        AnonymousBangEquals(AnonymousBangEquals),
        AnonymousCaret(AnonymousCaret),
        AnonymousEqualsEquals(AnonymousEqualsEquals),
        AnonymousGreaterThan(AnonymousGreaterThan),
        AnonymousGreaterThanEquals(AnonymousGreaterThanEquals),
        AnonymousGreaterThanGreaterThan(AnonymousGreaterThanGreaterThan),
        AnonymousLessThan(AnonymousLessThan),
        AnonymousLessThanEquals(AnonymousLessThanEquals),
        AnonymousLessThanLessThan(AnonymousLessThanLessThan),
        AnonymousMinus(AnonymousMinus),
        AnonymousPercent(AnonymousPercent),
        AnonymousPipe(AnonymousPipe),
        AnonymousPipePipe(AnonymousPipePipe),
        AnonymousPlus(AnonymousPlus),
        AnonymousSlash(AnonymousSlash),
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl BinaryExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousAmpersand(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersand(
                                AnonymousAmpersand::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousAmpersandAmpersand(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersandAmpersand(
                                AnonymousAmpersandAmpersand::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousAsterisk(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsterisk(
                                AnonymousAsterisk::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousBangEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousBangEquals(
                                AnonymousBangEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousCaret(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaret(
                                AnonymousCaret::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousEqualsEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousEqualsEquals(
                                AnonymousEqualsEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThan(
                                AnonymousGreaterThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanEquals(
                                AnonymousGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousGreaterThanGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThan(
                                AnonymousGreaterThanGreaterThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThan(
                                AnonymousLessThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanEquals(
                                AnonymousLessThanEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousLessThanLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThan(
                                AnonymousLessThanLessThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousPercent(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercent(
                                AnonymousPercent::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousPipe(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipe(
                                AnonymousPipe::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousPipePipe(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipePipe(
                                AnonymousPipePipe::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousPlus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlus(
                                AnonymousPlus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AnonymousSlash(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlash(
                                AnonymousSlash::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BinaryExpressionOperator {
        AnonymousAmpersand(AnonymousAmpersand),
        AnonymousAmpersandAmpersand(AnonymousAmpersandAmpersand),
        AnonymousAsterisk(AnonymousAsterisk),
        AnonymousBangEquals(AnonymousBangEquals),
        AnonymousCaret(AnonymousCaret),
        AnonymousEqualsEquals(AnonymousEqualsEquals),
        AnonymousGreaterThan(AnonymousGreaterThan),
        AnonymousGreaterThanEquals(AnonymousGreaterThanEquals),
        AnonymousGreaterThanGreaterThan(AnonymousGreaterThanGreaterThan),
        AnonymousLessThan(AnonymousLessThan),
        AnonymousLessThanEquals(AnonymousLessThanEquals),
        AnonymousLessThanLessThan(AnonymousLessThanLessThan),
        AnonymousMinus(AnonymousMinus),
        AnonymousPercent(AnonymousPercent),
        AnonymousPipe(AnonymousPipe),
        AnonymousPipePipe(AnonymousPipePipe),
        AnonymousPlus(AnonymousPlus),
        AnonymousSlash(AnonymousSlash),
    }
    impl BinaryExpressionOperator {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousAmpersand(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersand(
                                AnonymousAmpersand::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousAmpersandAmpersand(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersandAmpersand(
                                AnonymousAmpersandAmpersand::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousAsterisk(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsterisk(
                                AnonymousAsterisk::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousBangEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousBangEquals(
                                AnonymousBangEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousCaret(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaret(
                                AnonymousCaret::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousEqualsEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousEqualsEquals(
                                AnonymousEqualsEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThan(
                                AnonymousGreaterThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanEquals(
                                AnonymousGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousGreaterThanGreaterThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThan(
                                AnonymousGreaterThanGreaterThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThan(
                                AnonymousLessThan::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanEquals(
                                AnonymousLessThanEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousLessThanLessThan(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThan(
                                AnonymousLessThanLessThan::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousMinus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinus(
                                AnonymousMinus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousPercent(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercent(
                                AnonymousPercent::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousPipe(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipe(
                                AnonymousPipe::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousPipePipe(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipePipe(
                                AnonymousPipePipe::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousPlus(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlus(
                                AnonymousPlus::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BinaryExpressionOperatorRef::AnonymousSlash(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlash(
                                AnonymousSlash::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BlockChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AssociatedType(AssociatedType),
        AsyncBlock(AsyncBlock),
        AttributeItem(AttributeItem),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ConstItem(ConstItem),
        ContinueExpression(ContinueExpression),
        EmptyStatement(EmptyStatement),
        EnumItem(EnumItem),
        ExpressionStatement(ExpressionStatement),
        ExternCrateDeclaration(ExternCrateDeclaration),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        ForeignModItem(ForeignModItem),
        FunctionItem(FunctionItem),
        FunctionSignatureItem(FunctionSignatureItem),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        ImplItem(ImplItem),
        IndexExpression(IndexExpression),
        InnerAttributeItem(InnerAttributeItem),
        IntegerLiteral(IntegerLiteral),
        Label(Label),
        LetDeclaration(LetDeclaration),
        LoopExpression(LoopExpression),
        MacroDefinition(MacroDefinition),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ModItem(ModItem),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StaticItem(StaticItem),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        StructItem(StructItem),
        TraitItem(TraitItem),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        TypeItem(TypeItem),
        UnaryExpression(UnaryExpression),
        UnionItem(UnionItem),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        UseDeclaration(UseDeclaration),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl BlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::AssociatedType(
                        _,
                    ) => {
                        Ok(
                            Self::AssociatedType(
                                AssociatedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ConstItem(
                        _,
                    ) => {
                        Ok(
                            Self::ConstItem(
                                ConstItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::EmptyStatement(
                        _,
                    ) => {
                        Ok(
                            Self::EmptyStatement(
                                EmptyStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::EnumItem(
                        _,
                    ) => Ok(Self::EnumItem(EnumItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ExpressionStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionStatement(
                                ExpressionStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ExternCrateDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::ExternCrateDeclaration(
                                ExternCrateDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ForeignModItem(
                        _,
                    ) => {
                        Ok(
                            Self::ForeignModItem(
                                ForeignModItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::FunctionItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionItem(
                                FunctionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::FunctionSignatureItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionSignatureItem(
                                FunctionSignatureItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ImplItem(
                        _,
                    ) => Ok(Self::ImplItem(ImplItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::InnerAttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::InnerAttributeItem(
                                InnerAttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::Label(
                        _,
                    ) => Ok(Self::Label(Label::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::LetDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::LetDeclaration(
                                LetDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::MacroDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::MacroDefinition(
                                MacroDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ModItem(
                        _,
                    ) => Ok(Self::ModItem(ModItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::StaticItem(
                        _,
                    ) => {
                        Ok(
                            Self::StaticItem(
                                StaticItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::StructItem(
                        _,
                    ) => {
                        Ok(
                            Self::StructItem(
                                StructItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::TraitItem(
                        _,
                    ) => {
                        Ok(
                            Self::TraitItem(
                                TraitItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::TypeItem(
                        _,
                    ) => Ok(Self::TypeItem(TypeItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::UnionItem(
                        _,
                    ) => {
                        Ok(
                            Self::UnionItem(
                                UnionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::UseDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::UseDeclaration(
                                UseDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BlockCommentChildren {
        DocComment(DocComment),
        InnerDocCommentMarker(InnerDocCommentMarker),
        OuterDocCommentMarker(OuterDocCommentMarker),
    }
    impl BlockCommentChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockCommentChildrenRef::DocComment(
                        _,
                    ) => {
                        Ok(
                            Self::DocComment(
                                DocComment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockCommentChildrenRef::InnerDocCommentMarker(
                        _,
                    ) => {
                        Ok(
                            Self::InnerDocCommentMarker(
                                InnerDocCommentMarker::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BlockCommentChildrenRef::OuterDocCommentMarker(
                        _,
                    ) => {
                        Ok(
                            Self::OuterDocCommentMarker(
                                OuterDocCommentMarker::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BoundedTypeChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        Lifetime(Lifetime),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
        UseBounds(UseBounds),
    }
    impl BoundedTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BoundedTypeChildrenRef::UseBounds(
                        _,
                    ) => {
                        Ok(
                            Self::UseBounds(
                                UseBounds::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BracketedTypeChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        QualifiedType(QualifiedType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl BracketedTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::QualifiedType(
                        _,
                    ) => {
                        Ok(
                            Self::QualifiedType(
                                QualifiedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BracketedTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum BreakExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        Label(Label),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl BreakExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::Label(
                        _,
                    ) => Ok(Self::Label(Label::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::BreakExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CallExpressionChildren {
        Arguments(Arguments),
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl CallExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::Arguments(
                        _,
                    ) => {
                        Ok(
                            Self::Arguments(
                                Arguments::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CallExpressionFunction {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl CallExpressionFunction {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CallExpressionFunctionRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CapturedPatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl CapturedPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CapturedPatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ClosureExpressionBody {
        AnonymousUnderscore(AnonymousUnderscore),
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ClosureExpressionBody {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionBodyRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ClosureExpressionChildren {
        AbstractType(AbstractType),
        AnonymousUnderscore(AnonymousUnderscore),
        ArrayExpression(ArrayExpression),
        ArrayType(ArrayType),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        ClosureParameters(ClosureParameters),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        DynamicType(DynamicType),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        FunctionType(FunctionType),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericType(GenericType),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        NeverType(NeverType),
        ParenthesizedExpression(ParenthesizedExpression),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TupleType(TupleType),
        TypeCastExpression(TypeCastExpression),
        TypeIdentifier(TypeIdentifier),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnitType(UnitType),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ClosureExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ClosureParameters(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureParameters(
                                ClosureParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ClosureParametersChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        Parameter(Parameter),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl ClosureParametersChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::Parameter(
                        _,
                    ) => {
                        Ok(
                            Self::Parameter(
                                Parameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ClosureParametersChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CompoundAssignmentExprChildren {
        AnonymousAmpersandEquals(AnonymousAmpersandEquals),
        AnonymousAsteriskEquals(AnonymousAsteriskEquals),
        AnonymousCaretEquals(AnonymousCaretEquals),
        AnonymousGreaterThanGreaterThanEquals(AnonymousGreaterThanGreaterThanEquals),
        AnonymousLessThanLessThanEquals(AnonymousLessThanLessThanEquals),
        AnonymousMinusEquals(AnonymousMinusEquals),
        AnonymousPercentEquals(AnonymousPercentEquals),
        AnonymousPipeEquals(AnonymousPipeEquals),
        AnonymousPlusEquals(AnonymousPlusEquals),
        AnonymousSlashEquals(AnonymousSlashEquals),
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl CompoundAssignmentExprChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousAmpersandEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersandEquals(
                                AnonymousAmpersandEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousAsteriskEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskEquals(
                                AnonymousAsteriskEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousCaretEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaretEquals(
                                AnonymousCaretEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousGreaterThanGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThanEquals(
                                AnonymousGreaterThanGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousLessThanLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThanEquals(
                                AnonymousLessThanLessThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousMinusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinusEquals(
                                AnonymousMinusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousPercentEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercentEquals(
                                AnonymousPercentEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousPipeEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipeEquals(
                                AnonymousPipeEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousPlusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlusEquals(
                                AnonymousPlusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AnonymousSlashEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashEquals(
                                AnonymousSlashEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum CompoundAssignmentExprOperator {
        AnonymousAmpersandEquals(AnonymousAmpersandEquals),
        AnonymousAsteriskEquals(AnonymousAsteriskEquals),
        AnonymousCaretEquals(AnonymousCaretEquals),
        AnonymousGreaterThanGreaterThanEquals(AnonymousGreaterThanGreaterThanEquals),
        AnonymousLessThanLessThanEquals(AnonymousLessThanLessThanEquals),
        AnonymousMinusEquals(AnonymousMinusEquals),
        AnonymousPercentEquals(AnonymousPercentEquals),
        AnonymousPipeEquals(AnonymousPipeEquals),
        AnonymousPlusEquals(AnonymousPlusEquals),
        AnonymousSlashEquals(AnonymousSlashEquals),
    }
    impl CompoundAssignmentExprOperator {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousAmpersandEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAmpersandEquals(
                                AnonymousAmpersandEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousAsteriskEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousAsteriskEquals(
                                AnonymousAsteriskEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousCaretEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousCaretEquals(
                                AnonymousCaretEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousGreaterThanGreaterThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousGreaterThanGreaterThanEquals(
                                AnonymousGreaterThanGreaterThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousLessThanLessThanEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousLessThanLessThanEquals(
                                AnonymousLessThanLessThanEquals::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousMinusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousMinusEquals(
                                AnonymousMinusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousPercentEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPercentEquals(
                                AnonymousPercentEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousPipeEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPipeEquals(
                                AnonymousPipeEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousPlusEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousPlusEquals(
                                AnonymousPlusEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::CompoundAssignmentExprOperatorRef::AnonymousSlashEquals(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousSlashEquals(
                                AnonymousSlashEquals::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ConstBlockChildren {
        Block(Block),
    }
    impl ConstBlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstBlockChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ConstItemChildren {
        AbstractType(AbstractType),
        ArrayExpression(ArrayExpression),
        ArrayType(ArrayType),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        DynamicType(DynamicType),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        FunctionType(FunctionType),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericType(GenericType),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        NeverType(NeverType),
        ParenthesizedExpression(ParenthesizedExpression),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TupleType(TupleType),
        TypeCastExpression(TypeCastExpression),
        TypeIdentifier(TypeIdentifier),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnitType(UnitType),
        UnsafeBlock(UnsafeBlock),
        VisibilityModifier(VisibilityModifier),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ConstItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstItemChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ConstParameterChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        CharLiteral(CharLiteral),
        DynamicType(DynamicType),
        FloatLiteral(FloatLiteral),
        FunctionType(FunctionType),
        GenericType(GenericType),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NegativeLiteral(NegativeLiteral),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RawStringLiteral(RawStringLiteral),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        StringLiteral(StringLiteral),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl ConstParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ConstParameterValue {
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        NegativeLiteral(NegativeLiteral),
        RawStringLiteral(RawStringLiteral),
        StringLiteral(StringLiteral),
    }
    impl ConstParameterValue {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ConstParameterValueRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ContinueExpressionChildren {
        Label(Label),
    }
    impl ContinueExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ContinueExpressionChildrenRef::Label(
                        _,
                    ) => Ok(Self::Label(Label::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DeclarationListChildren {
        AssociatedType(AssociatedType),
        AttributeItem(AttributeItem),
        ConstItem(ConstItem),
        EmptyStatement(EmptyStatement),
        EnumItem(EnumItem),
        ExternCrateDeclaration(ExternCrateDeclaration),
        ForeignModItem(ForeignModItem),
        FunctionItem(FunctionItem),
        FunctionSignatureItem(FunctionSignatureItem),
        ImplItem(ImplItem),
        InnerAttributeItem(InnerAttributeItem),
        LetDeclaration(LetDeclaration),
        MacroDefinition(MacroDefinition),
        MacroInvocation(MacroInvocation),
        ModItem(ModItem),
        StaticItem(StaticItem),
        StructItem(StructItem),
        TraitItem(TraitItem),
        TypeItem(TypeItem),
        UnionItem(UnionItem),
        UseDeclaration(UseDeclaration),
    }
    impl DeclarationListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::AssociatedType(
                        _,
                    ) => {
                        Ok(
                            Self::AssociatedType(
                                AssociatedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::ConstItem(
                        _,
                    ) => {
                        Ok(
                            Self::ConstItem(
                                ConstItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::EmptyStatement(
                        _,
                    ) => {
                        Ok(
                            Self::EmptyStatement(
                                EmptyStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::EnumItem(
                        _,
                    ) => Ok(Self::EnumItem(EnumItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::ExternCrateDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::ExternCrateDeclaration(
                                ExternCrateDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::ForeignModItem(
                        _,
                    ) => {
                        Ok(
                            Self::ForeignModItem(
                                ForeignModItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::FunctionItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionItem(
                                FunctionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::FunctionSignatureItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionSignatureItem(
                                FunctionSignatureItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::ImplItem(
                        _,
                    ) => Ok(Self::ImplItem(ImplItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::InnerAttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::InnerAttributeItem(
                                InnerAttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::LetDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::LetDeclaration(
                                LetDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::MacroDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::MacroDefinition(
                                MacroDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::ModItem(
                        _,
                    ) => Ok(Self::ModItem(ModItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::StaticItem(
                        _,
                    ) => {
                        Ok(
                            Self::StaticItem(
                                StaticItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::StructItem(
                        _,
                    ) => {
                        Ok(
                            Self::StructItem(
                                StructItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::TraitItem(
                        _,
                    ) => {
                        Ok(
                            Self::TraitItem(
                                TraitItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::TypeItem(
                        _,
                    ) => Ok(Self::TypeItem(TypeItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::UnionItem(
                        _,
                    ) => {
                        Ok(
                            Self::UnionItem(
                                UnionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationListChildrenRef::UseDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::UseDeclaration(
                                UseDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DynamicTypeChildren {
        FunctionType(FunctionType),
        GenericType(GenericType),
        HigherRankedTraitBound(HigherRankedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
    }
    impl DynamicTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeChildrenRef::HigherRankedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::HigherRankedTraitBound(
                                HigherRankedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DynamicTypeTrait {
        FunctionType(FunctionType),
        GenericType(GenericType),
        HigherRankedTraitBound(HigherRankedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
    }
    impl DynamicTypeTrait {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeTraitRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeTraitRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeTraitRef::HigherRankedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::HigherRankedTraitBound(
                                HigherRankedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeTraitRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeTraitRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DynamicTypeTraitRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ElseClauseChildren {
        Block(Block),
        IfExpression(IfExpression),
    }
    impl ElseClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ElseClauseChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ElseClauseChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum EnumItemChildren {
        EnumVariantList(EnumVariantList),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        VisibilityModifier(VisibilityModifier),
        WhereClause(WhereClause),
    }
    impl EnumItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumItemChildrenRef::EnumVariantList(
                        _,
                    ) => {
                        Ok(
                            Self::EnumVariantList(
                                EnumVariantList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum EnumVariantBody {
        FieldDeclarationList(FieldDeclarationList),
        OrderedFieldDeclarationList(OrderedFieldDeclarationList),
    }
    impl EnumVariantBody {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantBodyRef::FieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::FieldDeclarationList(
                                FieldDeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantBodyRef::OrderedFieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::OrderedFieldDeclarationList(
                                OrderedFieldDeclarationList::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum EnumVariantChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldDeclarationList(FieldDeclarationList),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        OrderedFieldDeclarationList(OrderedFieldDeclarationList),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        VisibilityModifier(VisibilityModifier),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl EnumVariantChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::FieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::FieldDeclarationList(
                                FieldDeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::OrderedFieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::OrderedFieldDeclarationList(
                                OrderedFieldDeclarationList::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum EnumVariantListChildren {
        AttributeItem(AttributeItem),
        EnumVariant(EnumVariant),
    }
    impl EnumVariantListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantListChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::EnumVariantListChildrenRef::EnumVariant(
                        _,
                    ) => {
                        Ok(
                            Self::EnumVariant(
                                EnumVariant::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExpressionStatementChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ExpressionStatementChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionStatementChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExternCrateDeclarationChildren {
        Crate(Crate),
        Identifier(Identifier),
        VisibilityModifier(VisibilityModifier),
    }
    impl ExternCrateDeclarationChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExternCrateDeclarationChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExternCrateDeclarationChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExternCrateDeclarationChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ExternModifierChildren {
        StringLiteral(StringLiteral),
    }
    impl ExternModifierChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExternModifierChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldDeclarationChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FieldIdentifier(FieldIdentifier),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
        VisibilityModifier(VisibilityModifier),
    }
    impl FieldDeclarationChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::FieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::FieldIdentifier(
                                FieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldDeclarationListChildren {
        AttributeItem(AttributeItem),
        FieldDeclaration(FieldDeclaration),
    }
    impl FieldDeclarationListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationListChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldDeclarationListChildrenRef::FieldDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::FieldDeclaration(
                                FieldDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FieldIdentifier(FieldIdentifier),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl FieldExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::FieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::FieldIdentifier(
                                FieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldExpressionField {
        FieldIdentifier(FieldIdentifier),
        IntegerLiteral(IntegerLiteral),
    }
    impl FieldExpressionField {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionFieldRef::FieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::FieldIdentifier(
                                FieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldExpressionFieldRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldInitializerChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AttributeItem(AttributeItem),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FieldIdentifier(FieldIdentifier),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl FieldInitializerChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::FieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::FieldIdentifier(
                                FieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldInitializerField {
        FieldIdentifier(FieldIdentifier),
        IntegerLiteral(IntegerLiteral),
    }
    impl FieldInitializerField {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerFieldRef::FieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::FieldIdentifier(
                                FieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerFieldRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldInitializerListChildren {
        BaseFieldInitializer(BaseFieldInitializer),
        FieldInitializer(FieldInitializer),
        ShorthandFieldInitializer(ShorthandFieldInitializer),
    }
    impl FieldInitializerListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerListChildrenRef::BaseFieldInitializer(
                        _,
                    ) => {
                        Ok(
                            Self::BaseFieldInitializer(
                                BaseFieldInitializer::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerListChildrenRef::FieldInitializer(
                        _,
                    ) => {
                        Ok(
                            Self::FieldInitializer(
                                FieldInitializer::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldInitializerListChildrenRef::ShorthandFieldInitializer(
                        _,
                    ) => {
                        Ok(
                            Self::ShorthandFieldInitializer(
                                ShorthandFieldInitializer::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldPatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FieldIdentifier(FieldIdentifier),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        MutableSpecifier(MutableSpecifier),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        ShorthandFieldIdentifier(ShorthandFieldIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl FieldPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::FieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::FieldIdentifier(
                                FieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::ShorthandFieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ShorthandFieldIdentifier(
                                ShorthandFieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FieldPatternName {
        FieldIdentifier(FieldIdentifier),
        ShorthandFieldIdentifier(ShorthandFieldIdentifier),
    }
    impl FieldPatternName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternNameRef::FieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::FieldIdentifier(
                                FieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FieldPatternNameRef::ShorthandFieldIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ShorthandFieldIdentifier(
                                ShorthandFieldIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForExpressionChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        Label(Label),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferenceExpression(ReferenceExpression),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        StructPattern(StructPattern),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ForExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::Label(
                        _,
                    ) => Ok(Self::Label(Label::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForLifetimesChildren {
        Lifetime(Lifetime),
    }
    impl ForLifetimesChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForLifetimesChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ForeignModItemChildren {
        DeclarationList(DeclarationList),
        ExternModifier(ExternModifier),
        VisibilityModifier(VisibilityModifier),
    }
    impl ForeignModItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForeignModItemChildrenRef::DeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::DeclarationList(
                                DeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForeignModItemChildrenRef::ExternModifier(
                        _,
                    ) => {
                        Ok(
                            Self::ExternModifier(
                                ExternModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ForeignModItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionItemChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        Block(Block),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionModifiers(FunctionModifiers),
        FunctionType(FunctionType),
        GenericType(GenericType),
        Identifier(Identifier),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        Parameters(Parameters),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        UnitType(UnitType),
        VisibilityModifier(VisibilityModifier),
        WhereClause(WhereClause),
    }
    impl FunctionItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::FunctionModifiers(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionModifiers(
                                FunctionModifiers::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::Parameters(
                        _,
                    ) => {
                        Ok(
                            Self::Parameters(
                                Parameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionItemName {
        Identifier(Identifier),
        Metavariable(Metavariable),
    }
    impl FunctionItemName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemNameRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionItemNameRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionModifiersChildren {
        ExternModifier(ExternModifier),
    }
    impl FunctionModifiersChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionModifiersChildrenRef::ExternModifier(
                        _,
                    ) => {
                        Ok(
                            Self::ExternModifier(
                                ExternModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionSignatureItemChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionModifiers(FunctionModifiers),
        FunctionType(FunctionType),
        GenericType(GenericType),
        Identifier(Identifier),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        Parameters(Parameters),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        UnitType(UnitType),
        VisibilityModifier(VisibilityModifier),
        WhereClause(WhereClause),
    }
    impl FunctionSignatureItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::FunctionModifiers(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionModifiers(
                                FunctionModifiers::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::Parameters(
                        _,
                    ) => {
                        Ok(
                            Self::Parameters(
                                Parameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionSignatureItemName {
        Identifier(Identifier),
        Metavariable(Metavariable),
    }
    impl FunctionSignatureItemName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemNameRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionSignatureItemNameRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionTypeChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        ForLifetimes(ForLifetimes),
        FunctionModifiers(FunctionModifiers),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        Parameters(Parameters),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl FunctionTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::ForLifetimes(
                        _,
                    ) => {
                        Ok(
                            Self::ForLifetimes(
                                ForLifetimes::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::FunctionModifiers(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionModifiers(
                                FunctionModifiers::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::Parameters(
                        _,
                    ) => {
                        Ok(
                            Self::Parameters(
                                Parameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum FunctionTypeTrait {
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl FunctionTypeTrait {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeTraitRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::FunctionTypeTraitRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenBlockChildren {
        Block(Block),
    }
    impl GenBlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenBlockChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericFunctionChildren {
        FieldExpression(FieldExpression),
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
        TypeArguments(TypeArguments),
    }
    impl GenericFunctionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunctionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunctionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunctionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunctionChildrenRef::TypeArguments(
                        _,
                    ) => {
                        Ok(
                            Self::TypeArguments(
                                TypeArguments::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericFunctionFunction {
        FieldExpression(FieldExpression),
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
    }
    impl GenericFunctionFunction {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunctionFunctionRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunctionFunctionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericFunctionFunctionRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericPatternChildren {
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
        TypeArguments(TypeArguments),
    }
    impl GenericPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericPatternChildrenRef::TypeArguments(
                        _,
                    ) => {
                        Ok(
                            Self::TypeArguments(
                                TypeArguments::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericTypeChildren {
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeArguments(TypeArguments),
        TypeIdentifier(TypeIdentifier),
    }
    impl GenericTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeChildrenRef::TypeArguments(
                        _,
                    ) => {
                        Ok(
                            Self::TypeArguments(
                                TypeArguments::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericTypeType {
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl GenericTypeType {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeTypeRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeTypeRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeTypeRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeTypeRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericTypeWithTurbofishChildren {
        ScopedIdentifier(ScopedIdentifier),
        TypeArguments(TypeArguments),
        TypeIdentifier(TypeIdentifier),
    }
    impl GenericTypeWithTurbofishChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeWithTurbofishChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeWithTurbofishChildrenRef::TypeArguments(
                        _,
                    ) => {
                        Ok(
                            Self::TypeArguments(
                                TypeArguments::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeWithTurbofishChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum GenericTypeWithTurbofishType {
        ScopedIdentifier(ScopedIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl GenericTypeWithTurbofishType {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeWithTurbofishTypeRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::GenericTypeWithTurbofishTypeRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum HigherRankedTraitBoundChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        UnitType(UnitType),
    }
    impl HigherRankedTraitBoundChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::HigherRankedTraitBoundChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum IfExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        ElseClause(ElseClause),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LetChain(LetChain),
        LetCondition(LetCondition),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl IfExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ElseClause(
                        _,
                    ) => {
                        Ok(
                            Self::ElseClause(
                                ElseClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::LetChain(
                        _,
                    ) => Ok(Self::LetChain(LetChain::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::LetCondition(
                        _,
                    ) => {
                        Ok(
                            Self::LetCondition(
                                LetCondition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum IfExpressionCondition {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LetChain(LetChain),
        LetCondition(LetCondition),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl IfExpressionCondition {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::LetChain(
                        _,
                    ) => Ok(Self::LetChain(LetChain::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::LetCondition(
                        _,
                    ) => {
                        Ok(
                            Self::LetCondition(
                                LetCondition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IfExpressionConditionRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ImplItemChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DeclarationList(DeclarationList),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        UnitType(UnitType),
        WhereClause(WhereClause),
    }
    impl ImplItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::DeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::DeclarationList(
                                DeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ImplItemTrait {
        GenericType(GenericType),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl ImplItemTrait {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemTraitRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemTraitRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ImplItemTraitRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum IndexExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl IndexExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::IndexExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum InnerAttributeItemChildren {
        Attribute(Attribute),
    }
    impl InnerAttributeItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::InnerAttributeItemChildrenRef::Attribute(
                        _,
                    ) => {
                        Ok(
                            Self::Attribute(
                                Attribute::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LabelChildren {
        Identifier(Identifier),
    }
    impl LabelChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LabelChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LetChainChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LetCondition(LetCondition),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl LetChainChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::LetCondition(
                        _,
                    ) => {
                        Ok(
                            Self::LetCondition(
                                LetCondition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetChainChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LetConditionChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferenceExpression(ReferenceExpression),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        StructPattern(StructPattern),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl LetConditionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetConditionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LetDeclarationChildren {
        AbstractType(AbstractType),
        AnonymousUnderscore(AnonymousUnderscore),
        ArrayExpression(ArrayExpression),
        ArrayType(ArrayType),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        DynamicType(DynamicType),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        FunctionType(FunctionType),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericPattern(GenericPattern),
        GenericType(GenericType),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        MutPattern(MutPattern),
        MutableSpecifier(MutableSpecifier),
        NegativeLiteral(NegativeLiteral),
        NeverType(NeverType),
        OrPattern(OrPattern),
        ParenthesizedExpression(ParenthesizedExpression),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RangeExpression(RangeExpression),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferenceExpression(ReferenceExpression),
        ReferencePattern(ReferencePattern),
        ReferenceType(ReferenceType),
        RemainingFieldPattern(RemainingFieldPattern),
        RemovedTraitBound(RemovedTraitBound),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfNode(SelfNode),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        StructPattern(StructPattern),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
        TupleType(TupleType),
        TypeCastExpression(TypeCastExpression),
        TypeIdentifier(TypeIdentifier),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnitType(UnitType),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl LetDeclarationChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LetDeclarationChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LifetimeChildren {
        Identifier(Identifier),
    }
    impl LifetimeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LifetimeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LifetimeParameterChildren {
        Lifetime(Lifetime),
        TraitBounds(TraitBounds),
    }
    impl LifetimeParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LifetimeParameterChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LifetimeParameterChildrenRef::TraitBounds(
                        _,
                    ) => {
                        Ok(
                            Self::TraitBounds(
                                TraitBounds::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LineCommentChildren {
        DocComment(DocComment),
        InnerDocCommentMarker(InnerDocCommentMarker),
        OuterDocCommentMarker(OuterDocCommentMarker),
    }
    impl LineCommentChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LineCommentChildrenRef::DocComment(
                        _,
                    ) => {
                        Ok(
                            Self::DocComment(
                                DocComment::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LineCommentChildrenRef::InnerDocCommentMarker(
                        _,
                    ) => {
                        Ok(
                            Self::InnerDocCommentMarker(
                                InnerDocCommentMarker::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LineCommentChildrenRef::OuterDocCommentMarker(
                        _,
                    ) => {
                        Ok(
                            Self::OuterDocCommentMarker(
                                OuterDocCommentMarker::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LoopExpressionChildren {
        Block(Block),
        Label(Label),
    }
    impl LoopExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LoopExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LoopExpressionChildrenRef::Label(
                        _,
                    ) => Ok(Self::Label(Label::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MacroDefinitionChildren {
        Identifier(Identifier),
        MacroRule(MacroRule),
    }
    impl MacroDefinitionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroDefinitionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroDefinitionChildrenRef::MacroRule(
                        _,
                    ) => {
                        Ok(
                            Self::MacroRule(
                                MacroRule::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MacroInvocationChildren {
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
        TokenTree(TokenTree),
    }
    impl MacroInvocationChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroInvocationChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroInvocationChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroInvocationChildrenRef::TokenTree(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTree(
                                TokenTree::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MacroInvocationMacro {
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
    }
    impl MacroInvocationMacro {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroInvocationMacroRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroInvocationMacroRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MacroRuleChildren {
        TokenTree(TokenTree),
        TokenTreePattern(TokenTreePattern),
    }
    impl MacroRuleChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroRuleChildrenRef::TokenTree(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTree(
                                TokenTree::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MacroRuleChildrenRef::TokenTreePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTreePattern(
                                TokenTreePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MatchArmChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AttributeItem(AttributeItem),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        InnerAttributeItem(InnerAttributeItem),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        MatchPattern(MatchPattern),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl MatchArmChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::InnerAttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::InnerAttributeItem(
                                InnerAttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::MatchPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MatchPattern(
                                MatchPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchArmChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MatchBlockChildren {
        MatchArm(MatchArm),
    }
    impl MatchBlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchBlockChildrenRef::MatchArm(
                        _,
                    ) => Ok(Self::MatchArm(MatchArm::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MatchExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchBlock(MatchBlock),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl MatchExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::MatchBlock(
                        _,
                    ) => {
                        Ok(
                            Self::MatchBlock(
                                MatchBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MatchPatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LetChain(LetChain),
        LetCondition(LetCondition),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferenceExpression(ReferenceExpression),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        StructPattern(StructPattern),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl MatchPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::LetChain(
                        _,
                    ) => Ok(Self::LetChain(LetChain::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::LetCondition(
                        _,
                    ) => {
                        Ok(
                            Self::LetCondition(
                                LetCondition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MatchPatternCondition {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LetChain(LetChain),
        LetCondition(LetCondition),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl MatchPatternCondition {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::LetChain(
                        _,
                    ) => Ok(Self::LetChain(LetChain::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::LetCondition(
                        _,
                    ) => {
                        Ok(
                            Self::LetCondition(
                                LetCondition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MatchPatternConditionRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ModItemChildren {
        DeclarationList(DeclarationList),
        Identifier(Identifier),
        VisibilityModifier(VisibilityModifier),
    }
    impl ModItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ModItemChildrenRef::DeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::DeclarationList(
                                DeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ModItemChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ModItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum MutPatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        MutableSpecifier(MutableSpecifier),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl MutPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::MutPatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum NegativeLiteralChildren {
        FloatLiteral(FloatLiteral),
        IntegerLiteral(IntegerLiteral),
    }
    impl NegativeLiteralChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::NegativeLiteralChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::NegativeLiteralChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum OrPatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl OrPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrPatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum OrderedFieldDeclarationListChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        AttributeItem(AttributeItem),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
        VisibilityModifier(VisibilityModifier),
    }
    impl OrderedFieldDeclarationListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::OrderedFieldDeclarationListChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ParameterChildren {
        AbstractType(AbstractType),
        AnonymousUnderscore(AnonymousUnderscore),
        ArrayType(ArrayType),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        DynamicType(DynamicType),
        FloatLiteral(FloatLiteral),
        FunctionType(FunctionType),
        GenericPattern(GenericPattern),
        GenericType(GenericType),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        MutPattern(MutPattern),
        MutableSpecifier(MutableSpecifier),
        NegativeLiteral(NegativeLiteral),
        NeverType(NeverType),
        OrPattern(OrPattern),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        ReferenceType(ReferenceType),
        RemainingFieldPattern(RemainingFieldPattern),
        RemovedTraitBound(RemovedTraitBound),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfNode(SelfNode),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl ParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ParameterPattern {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl ParameterPattern {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParameterPatternRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ParametersChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        AttributeItem(AttributeItem),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        Parameter(Parameter),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfParameter(SelfParameter),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
        VariadicParameter(VariadicParameter),
    }
    impl ParametersChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::Parameter(
                        _,
                    ) => {
                        Ok(
                            Self::Parameter(
                                Parameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::SelfParameter(
                        _,
                    ) => {
                        Ok(
                            Self::SelfParameter(
                                SelfParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParametersChildrenRef::VariadicParameter(
                        _,
                    ) => {
                        Ok(
                            Self::VariadicParameter(
                                VariadicParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ParenthesizedExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ParenthesizedExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ParenthesizedExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum PointerTypeChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl PointerTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PointerTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum QualifiedTypeChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl QualifiedTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::QualifiedTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RangeExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl RangeExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangeExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RangePatternChildren {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        Crate(Crate),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        Metavariable(Metavariable),
        NegativeLiteral(NegativeLiteral),
        RawStringLiteral(RawStringLiteral),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        Super(Super),
    }
    impl RangePatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RangePatternLeft {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        Crate(Crate),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        Metavariable(Metavariable),
        NegativeLiteral(NegativeLiteral),
        RawStringLiteral(RawStringLiteral),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        Super(Super),
    }
    impl RangePatternLeft {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternLeftRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RangePatternRight {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        Crate(Crate),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        Metavariable(Metavariable),
        NegativeLiteral(NegativeLiteral),
        RawStringLiteral(RawStringLiteral),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        Super(Super),
    }
    impl RangePatternRight {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RangePatternRightRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RawStringLiteralChildren {
        StringContent(StringContent),
    }
    impl RawStringLiteralChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RawStringLiteralChildrenRef::StringContent(
                        _,
                    ) => {
                        Ok(
                            Self::StringContent(
                                StringContent::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RefPatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl RefPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RefPatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ReferenceExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ReferenceExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ReferencePatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        MutableSpecifier(MutableSpecifier),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl ReferencePatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferencePatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ReferenceTypeChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        Lifetime(Lifetime),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl ReferenceTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReferenceTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum RemovedTraitBoundChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl RemovedTraitBoundChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::RemovedTraitBoundChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ReturnExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl ReturnExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ReturnExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ScopedIdentifierChildren {
        BracketedType(BracketedType),
        Crate(Crate),
        GenericType(GenericType),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl ScopedIdentifierChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::BracketedType(
                        _,
                    ) => {
                        Ok(
                            Self::BracketedType(
                                BracketedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ScopedIdentifierName {
        Identifier(Identifier),
        Super(Super),
    }
    impl ScopedIdentifierName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierNameRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierNameRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ScopedIdentifierPath {
        BracketedType(BracketedType),
        Crate(Crate),
        GenericType(GenericType),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl ScopedIdentifierPath {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::BracketedType(
                        _,
                    ) => {
                        Ok(
                            Self::BracketedType(
                                BracketedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedIdentifierPathRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ScopedTypeIdentifierChildren {
        BracketedType(BracketedType),
        Crate(Crate),
        GenericType(GenericType),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
        TypeIdentifier(TypeIdentifier),
    }
    impl ScopedTypeIdentifierChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::BracketedType(
                        _,
                    ) => {
                        Ok(
                            Self::BracketedType(
                                BracketedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ScopedTypeIdentifierPath {
        BracketedType(BracketedType),
        Crate(Crate),
        GenericType(GenericType),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl ScopedTypeIdentifierPath {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::BracketedType(
                        _,
                    ) => {
                        Ok(
                            Self::BracketedType(
                                BracketedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedTypeIdentifierPathRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ScopedUseListChildren {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
        UseList(UseList),
    }
    impl ScopedUseListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListChildrenRef::UseList(
                        _,
                    ) => Ok(Self::UseList(UseList::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ScopedUseListPath {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl ScopedUseListPath {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListPathRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListPathRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListPathRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListPathRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListPathRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ScopedUseListPathRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SelfParameterChildren {
        Lifetime(Lifetime),
        MutableSpecifier(MutableSpecifier),
        SelfNode(SelfNode),
    }
    impl SelfParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SelfParameterChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SelfParameterChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SelfParameterChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum ShorthandFieldInitializerChildren {
        AttributeItem(AttributeItem),
        Identifier(Identifier),
    }
    impl ShorthandFieldInitializerChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ShorthandFieldInitializerChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ShorthandFieldInitializerChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SlicePatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl SlicePatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SlicePatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum SourceFileChildren {
        AssociatedType(AssociatedType),
        AttributeItem(AttributeItem),
        ConstItem(ConstItem),
        EmptyStatement(EmptyStatement),
        EnumItem(EnumItem),
        ExpressionStatement(ExpressionStatement),
        ExternCrateDeclaration(ExternCrateDeclaration),
        ForeignModItem(ForeignModItem),
        FunctionItem(FunctionItem),
        FunctionSignatureItem(FunctionSignatureItem),
        ImplItem(ImplItem),
        InnerAttributeItem(InnerAttributeItem),
        LetDeclaration(LetDeclaration),
        MacroDefinition(MacroDefinition),
        MacroInvocation(MacroInvocation),
        ModItem(ModItem),
        Shebang(Shebang),
        StaticItem(StaticItem),
        StructItem(StructItem),
        TraitItem(TraitItem),
        TypeItem(TypeItem),
        UnionItem(UnionItem),
        UseDeclaration(UseDeclaration),
    }
    impl SourceFileChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::AssociatedType(
                        _,
                    ) => {
                        Ok(
                            Self::AssociatedType(
                                AssociatedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::ConstItem(
                        _,
                    ) => {
                        Ok(
                            Self::ConstItem(
                                ConstItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::EmptyStatement(
                        _,
                    ) => {
                        Ok(
                            Self::EmptyStatement(
                                EmptyStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::EnumItem(
                        _,
                    ) => Ok(Self::EnumItem(EnumItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::ExpressionStatement(
                        _,
                    ) => {
                        Ok(
                            Self::ExpressionStatement(
                                ExpressionStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::ExternCrateDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::ExternCrateDeclaration(
                                ExternCrateDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::ForeignModItem(
                        _,
                    ) => {
                        Ok(
                            Self::ForeignModItem(
                                ForeignModItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::FunctionItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionItem(
                                FunctionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::FunctionSignatureItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionSignatureItem(
                                FunctionSignatureItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::ImplItem(
                        _,
                    ) => Ok(Self::ImplItem(ImplItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::InnerAttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::InnerAttributeItem(
                                InnerAttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::LetDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::LetDeclaration(
                                LetDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::MacroDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::MacroDefinition(
                                MacroDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::ModItem(
                        _,
                    ) => Ok(Self::ModItem(ModItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::Shebang(
                        _,
                    ) => Ok(Self::Shebang(Shebang::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::StaticItem(
                        _,
                    ) => {
                        Ok(
                            Self::StaticItem(
                                StaticItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::StructItem(
                        _,
                    ) => {
                        Ok(
                            Self::StructItem(
                                StructItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::TraitItem(
                        _,
                    ) => {
                        Ok(
                            Self::TraitItem(
                                TraitItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::TypeItem(
                        _,
                    ) => Ok(Self::TypeItem(TypeItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::UnionItem(
                        _,
                    ) => {
                        Ok(
                            Self::UnionItem(
                                UnionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::SourceFileChildrenRef::UseDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::UseDeclaration(
                                UseDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StaticItemChildren {
        AbstractType(AbstractType),
        ArrayExpression(ArrayExpression),
        ArrayType(ArrayType),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        DynamicType(DynamicType),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        FunctionType(FunctionType),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericType(GenericType),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        NeverType(NeverType),
        ParenthesizedExpression(ParenthesizedExpression),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TupleType(TupleType),
        TypeCastExpression(TypeCastExpression),
        TypeIdentifier(TypeIdentifier),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnitType(UnitType),
        UnsafeBlock(UnsafeBlock),
        VisibilityModifier(VisibilityModifier),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl StaticItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StaticItemChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StringLiteralChildren {
        EscapeSequence(EscapeSequence),
        StringContent(StringContent),
    }
    impl StringLiteralChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StringLiteralChildrenRef::EscapeSequence(
                        _,
                    ) => {
                        Ok(
                            Self::EscapeSequence(
                                EscapeSequence::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StringLiteralChildrenRef::StringContent(
                        _,
                    ) => {
                        Ok(
                            Self::StringContent(
                                StringContent::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StructExpressionChildren {
        FieldInitializerList(FieldInitializerList),
        GenericTypeWithTurbofish(GenericTypeWithTurbofish),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl StructExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpressionChildrenRef::FieldInitializerList(
                        _,
                    ) => {
                        Ok(
                            Self::FieldInitializerList(
                                FieldInitializerList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpressionChildrenRef::GenericTypeWithTurbofish(
                        _,
                    ) => {
                        Ok(
                            Self::GenericTypeWithTurbofish(
                                GenericTypeWithTurbofish::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpressionChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpressionChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StructExpressionName {
        GenericTypeWithTurbofish(GenericTypeWithTurbofish),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl StructExpressionName {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpressionNameRef::GenericTypeWithTurbofish(
                        _,
                    ) => {
                        Ok(
                            Self::GenericTypeWithTurbofish(
                                GenericTypeWithTurbofish::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpressionNameRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructExpressionNameRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StructItemBody {
        FieldDeclarationList(FieldDeclarationList),
        OrderedFieldDeclarationList(OrderedFieldDeclarationList),
    }
    impl StructItemBody {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemBodyRef::FieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::FieldDeclarationList(
                                FieldDeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemBodyRef::OrderedFieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::OrderedFieldDeclarationList(
                                OrderedFieldDeclarationList::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StructItemChildren {
        FieldDeclarationList(FieldDeclarationList),
        OrderedFieldDeclarationList(OrderedFieldDeclarationList),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        VisibilityModifier(VisibilityModifier),
        WhereClause(WhereClause),
    }
    impl StructItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemChildrenRef::FieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::FieldDeclarationList(
                                FieldDeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemChildrenRef::OrderedFieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::OrderedFieldDeclarationList(
                                OrderedFieldDeclarationList::new(
                                    py,
                                    id,
                                    codebase_arc.clone(),
                                )?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StructPatternChildren {
        FieldPattern(FieldPattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl StructPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructPatternChildrenRef::FieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::FieldPattern(
                                FieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructPatternChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructPatternChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum StructPatternType {
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TypeIdentifier(TypeIdentifier),
    }
    impl StructPatternType {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructPatternTypeRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::StructPatternTypeRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TokenBindingPatternChildren {
        FragmentSpecifier(FragmentSpecifier),
        Metavariable(Metavariable),
    }
    impl TokenBindingPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenBindingPatternChildrenRef::FragmentSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::FragmentSpecifier(
                                FragmentSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenBindingPatternChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TokenRepetitionChildren {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        Crate(Crate),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        PrimitiveType(PrimitiveType),
        RawStringLiteral(RawStringLiteral),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        Super(Super),
        TokenRepetition(TokenRepetition),
        TokenTree(TokenTree),
    }
    impl TokenRepetitionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::TokenRepetition(
                        _,
                    ) => {
                        Ok(
                            Self::TokenRepetition(
                                TokenRepetition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionChildrenRef::TokenTree(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTree(
                                TokenTree::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TokenRepetitionPatternChildren {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        Crate(Crate),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        PrimitiveType(PrimitiveType),
        RawStringLiteral(RawStringLiteral),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        Super(Super),
        TokenBindingPattern(TokenBindingPattern),
        TokenRepetitionPattern(TokenRepetitionPattern),
        TokenTreePattern(TokenTreePattern),
    }
    impl TokenRepetitionPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::TokenBindingPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TokenBindingPattern(
                                TokenBindingPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::TokenRepetitionPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TokenRepetitionPattern(
                                TokenRepetitionPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenRepetitionPatternChildrenRef::TokenTreePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTreePattern(
                                TokenTreePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TokenTreeChildren {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        Crate(Crate),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        PrimitiveType(PrimitiveType),
        RawStringLiteral(RawStringLiteral),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        Super(Super),
        TokenRepetition(TokenRepetition),
        TokenTree(TokenTree),
    }
    impl TokenTreeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::TokenRepetition(
                        _,
                    ) => {
                        Ok(
                            Self::TokenRepetition(
                                TokenRepetition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreeChildrenRef::TokenTree(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTree(
                                TokenTree::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TokenTreePatternChildren {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        Crate(Crate),
        FloatLiteral(FloatLiteral),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        Metavariable(Metavariable),
        MutableSpecifier(MutableSpecifier),
        PrimitiveType(PrimitiveType),
        RawStringLiteral(RawStringLiteral),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        Super(Super),
        TokenBindingPattern(TokenBindingPattern),
        TokenRepetitionPattern(TokenRepetitionPattern),
        TokenTreePattern(TokenTreePattern),
    }
    impl TokenTreePatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::TokenBindingPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TokenBindingPattern(
                                TokenBindingPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::TokenRepetitionPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TokenRepetitionPattern(
                                TokenRepetitionPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TokenTreePatternChildrenRef::TokenTreePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TokenTreePattern(
                                TokenTreePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TraitBoundsChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        HigherRankedTraitBound(HigherRankedTraitBound),
        Lifetime(Lifetime),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl TraitBoundsChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::HigherRankedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::HigherRankedTraitBound(
                                HigherRankedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitBoundsChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TraitItemChildren {
        DeclarationList(DeclarationList),
        TraitBounds(TraitBounds),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        VisibilityModifier(VisibilityModifier),
        WhereClause(WhereClause),
    }
    impl TraitItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitItemChildrenRef::DeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::DeclarationList(
                                DeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitItemChildrenRef::TraitBounds(
                        _,
                    ) => {
                        Ok(
                            Self::TraitBounds(
                                TraitBounds::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TraitItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TryBlockChildren {
        Block(Block),
    }
    impl TryBlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryBlockChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TryExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl TryExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TryExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TupleExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AttributeItem(AttributeItem),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl TupleExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TuplePatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl TuplePatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TuplePatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TupleStructPatternChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        GenericType(GenericType),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl TupleStructPatternChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TupleStructPatternType {
        GenericType(GenericType),
        Identifier(Identifier),
        ScopedIdentifier(ScopedIdentifier),
    }
    impl TupleStructPatternType {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternTypeRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternTypeRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleStructPatternTypeRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TupleTypeChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl TupleTypeChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TupleTypeChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeArgumentsChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        CharLiteral(CharLiteral),
        DynamicType(DynamicType),
        FloatLiteral(FloatLiteral),
        FunctionType(FunctionType),
        GenericType(GenericType),
        IntegerLiteral(IntegerLiteral),
        Lifetime(Lifetime),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RawStringLiteral(RawStringLiteral),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        StringLiteral(StringLiteral),
        TraitBounds(TraitBounds),
        TupleType(TupleType),
        TypeBinding(TypeBinding),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl TypeArgumentsChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::TraitBounds(
                        _,
                    ) => {
                        Ok(
                            Self::TraitBounds(
                                TraitBounds::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::TypeBinding(
                        _,
                    ) => {
                        Ok(
                            Self::TypeBinding(
                                TypeBinding::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeArgumentsChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeBindingChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeArguments(TypeArguments),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl TypeBindingChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::TypeArguments(
                        _,
                    ) => {
                        Ok(
                            Self::TypeArguments(
                                TypeArguments::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeBindingChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeCastExpressionChildren {
        AbstractType(AbstractType),
        ArrayExpression(ArrayExpression),
        ArrayType(ArrayType),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BoundedType(BoundedType),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        DynamicType(DynamicType),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        FunctionType(FunctionType),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        GenericType(GenericType),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        NeverType(NeverType),
        ParenthesizedExpression(ParenthesizedExpression),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TupleType(TupleType),
        TypeCastExpression(TypeCastExpression),
        TypeIdentifier(TypeIdentifier),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnitType(UnitType),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl TypeCastExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeCastExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeItemChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        UnitType(UnitType),
        VisibilityModifier(VisibilityModifier),
        WhereClause(WhereClause),
    }
    impl TypeItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeParameterChildren {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TraitBounds(TraitBounds),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl TypeParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::TraitBounds(
                        _,
                    ) => {
                        Ok(
                            Self::TraitBounds(
                                TraitBounds::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParameterChildrenRef::UnitType(
                        _,
                    ) => Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum TypeParametersChildren {
        AttributeItem(AttributeItem),
        ConstParameter(ConstParameter),
        LifetimeParameter(LifetimeParameter),
        Metavariable(Metavariable),
        TypeParameter(TypeParameter),
    }
    impl TypeParametersChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParametersChildrenRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParametersChildrenRef::ConstParameter(
                        _,
                    ) => {
                        Ok(
                            Self::ConstParameter(
                                ConstParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParametersChildrenRef::LifetimeParameter(
                        _,
                    ) => {
                        Ok(
                            Self::LifetimeParameter(
                                LifetimeParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParametersChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeParametersChildrenRef::TypeParameter(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameter(
                                TypeParameter::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UnaryExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl UnaryExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnaryExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UnionItemChildren {
        FieldDeclarationList(FieldDeclarationList),
        TypeIdentifier(TypeIdentifier),
        TypeParameters(TypeParameters),
        VisibilityModifier(VisibilityModifier),
        WhereClause(WhereClause),
    }
    impl UnionItemChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnionItemChildrenRef::FieldDeclarationList(
                        _,
                    ) => {
                        Ok(
                            Self::FieldDeclarationList(
                                FieldDeclarationList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnionItemChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnionItemChildrenRef::TypeParameters(
                        _,
                    ) => {
                        Ok(
                            Self::TypeParameters(
                                TypeParameters::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnionItemChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnionItemChildrenRef::WhereClause(
                        _,
                    ) => {
                        Ok(
                            Self::WhereClause(
                                WhereClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UnsafeBlockChildren {
        Block(Block),
    }
    impl UnsafeBlockChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UnsafeBlockChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UseAsClauseChildren {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl UseAsClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClauseChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClauseChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClauseChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClauseChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClauseChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClauseChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UseAsClausePath {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl UseAsClausePath {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClausePathRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClausePathRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClausePathRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClausePathRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClausePathRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseAsClausePathRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UseBoundsChildren {
        Lifetime(Lifetime),
        TypeIdentifier(TypeIdentifier),
    }
    impl UseBoundsChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseBoundsChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseBoundsChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UseDeclarationArgument {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        ScopedUseList(ScopedUseList),
        SelfNode(SelfNode),
        Super(Super),
        UseAsClause(UseAsClause),
        UseList(UseList),
        UseWildcard(UseWildcard),
    }
    impl UseDeclarationArgument {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::ScopedUseList(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedUseList(
                                ScopedUseList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::UseAsClause(
                        _,
                    ) => {
                        Ok(
                            Self::UseAsClause(
                                UseAsClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::UseList(
                        _,
                    ) => Ok(Self::UseList(UseList::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationArgumentRef::UseWildcard(
                        _,
                    ) => {
                        Ok(
                            Self::UseWildcard(
                                UseWildcard::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UseDeclarationChildren {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        ScopedUseList(ScopedUseList),
        SelfNode(SelfNode),
        Super(Super),
        UseAsClause(UseAsClause),
        UseList(UseList),
        UseWildcard(UseWildcard),
        VisibilityModifier(VisibilityModifier),
    }
    impl UseDeclarationChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::ScopedUseList(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedUseList(
                                ScopedUseList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::UseAsClause(
                        _,
                    ) => {
                        Ok(
                            Self::UseAsClause(
                                UseAsClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::UseList(
                        _,
                    ) => Ok(Self::UseList(UseList::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::UseWildcard(
                        _,
                    ) => {
                        Ok(
                            Self::UseWildcard(
                                UseWildcard::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseDeclarationChildrenRef::VisibilityModifier(
                        _,
                    ) => {
                        Ok(
                            Self::VisibilityModifier(
                                VisibilityModifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UseListChildren {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        ScopedUseList(ScopedUseList),
        SelfNode(SelfNode),
        Super(Super),
        UseAsClause(UseAsClause),
        UseList(UseList),
        UseWildcard(UseWildcard),
    }
    impl UseListChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::ScopedUseList(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedUseList(
                                ScopedUseList::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::UseAsClause(
                        _,
                    ) => {
                        Ok(
                            Self::UseAsClause(
                                UseAsClause::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::UseList(
                        _,
                    ) => Ok(Self::UseList(UseList::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseListChildrenRef::UseWildcard(
                        _,
                    ) => {
                        Ok(
                            Self::UseWildcard(
                                UseWildcard::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum UseWildcardChildren {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl UseWildcardChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseWildcardChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseWildcardChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseWildcardChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseWildcardChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseWildcardChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::UseWildcardChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum VariadicParameterChildren {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        MutableSpecifier(MutableSpecifier),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl VariadicParameterChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::MutableSpecifier(
                        _,
                    ) => {
                        Ok(
                            Self::MutableSpecifier(
                                MutableSpecifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VariadicParameterChildrenRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum VisibilityModifierChildren {
        Crate(Crate),
        Identifier(Identifier),
        Metavariable(Metavariable),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        Super(Super),
    }
    impl VisibilityModifierChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VisibilityModifierChildrenRef::Crate(
                        _,
                    ) => Ok(Self::Crate(Crate::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VisibilityModifierChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VisibilityModifierChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VisibilityModifierChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VisibilityModifierChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::VisibilityModifierChildrenRef::Super(
                        _,
                    ) => Ok(Self::Super(Super::new(py, id, codebase_arc.clone())?)),
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WhereClauseChildren {
        WherePredicate(WherePredicate),
    }
    impl WhereClauseChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhereClauseChildrenRef::WherePredicate(
                        _,
                    ) => {
                        Ok(
                            Self::WherePredicate(
                                WherePredicate::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WherePredicateChildren {
        ArrayType(ArrayType),
        GenericType(GenericType),
        HigherRankedTraitBound(HigherRankedTraitBound),
        Lifetime(Lifetime),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TraitBounds(TraitBounds),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
    }
    impl WherePredicateChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::HigherRankedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::HigherRankedTraitBound(
                                HigherRankedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::TraitBounds(
                        _,
                    ) => {
                        Ok(
                            Self::TraitBounds(
                                TraitBounds::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateChildrenRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WherePredicateLeft {
        ArrayType(ArrayType),
        GenericType(GenericType),
        HigherRankedTraitBound(HigherRankedTraitBound),
        Lifetime(Lifetime),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
    }
    impl WherePredicateLeft {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::HigherRankedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::HigherRankedTraitBound(
                                HigherRankedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::Lifetime(
                        _,
                    ) => Ok(Self::Lifetime(Lifetime::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WherePredicateLeftRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WhileExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        Label(Label),
        LetChain(LetChain),
        LetCondition(LetCondition),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl WhileExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::Label(
                        _,
                    ) => Ok(Self::Label(Label::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::LetChain(
                        _,
                    ) => Ok(Self::LetChain(LetChain::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::LetCondition(
                        _,
                    ) => {
                        Ok(
                            Self::LetCondition(
                                LetCondition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum WhileExpressionCondition {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LetChain(LetChain),
        LetCondition(LetCondition),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl WhileExpressionCondition {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::LetChain(
                        _,
                    ) => Ok(Self::LetChain(LetChain::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::LetCondition(
                        _,
                    ) => {
                        Ok(
                            Self::LetCondition(
                                LetCondition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::WhileExpressionConditionRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum YieldExpressionChildren {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl YieldExpressionChildren {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::YieldExpressionChildrenRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum DeclarationStatement {
        AssociatedType(AssociatedType),
        AttributeItem(AttributeItem),
        ConstItem(ConstItem),
        EmptyStatement(EmptyStatement),
        EnumItem(EnumItem),
        ExternCrateDeclaration(ExternCrateDeclaration),
        ForeignModItem(ForeignModItem),
        FunctionItem(FunctionItem),
        FunctionSignatureItem(FunctionSignatureItem),
        ImplItem(ImplItem),
        InnerAttributeItem(InnerAttributeItem),
        LetDeclaration(LetDeclaration),
        MacroDefinition(MacroDefinition),
        MacroInvocation(MacroInvocation),
        ModItem(ModItem),
        StaticItem(StaticItem),
        StructItem(StructItem),
        TraitItem(TraitItem),
        TypeItem(TypeItem),
        UnionItem(UnionItem),
        UseDeclaration(UseDeclaration),
    }
    impl DeclarationStatement {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::AssociatedType(
                        _,
                    ) => {
                        Ok(
                            Self::AssociatedType(
                                AssociatedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::AttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::AttributeItem(
                                AttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::ConstItem(
                        _,
                    ) => {
                        Ok(
                            Self::ConstItem(
                                ConstItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::EmptyStatement(
                        _,
                    ) => {
                        Ok(
                            Self::EmptyStatement(
                                EmptyStatement::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::EnumItem(
                        _,
                    ) => Ok(Self::EnumItem(EnumItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::ExternCrateDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::ExternCrateDeclaration(
                                ExternCrateDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::ForeignModItem(
                        _,
                    ) => {
                        Ok(
                            Self::ForeignModItem(
                                ForeignModItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::FunctionItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionItem(
                                FunctionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::FunctionSignatureItem(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionSignatureItem(
                                FunctionSignatureItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::ImplItem(
                        _,
                    ) => Ok(Self::ImplItem(ImplItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::InnerAttributeItem(
                        _,
                    ) => {
                        Ok(
                            Self::InnerAttributeItem(
                                InnerAttributeItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::LetDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::LetDeclaration(
                                LetDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::MacroDefinition(
                        _,
                    ) => {
                        Ok(
                            Self::MacroDefinition(
                                MacroDefinition::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::ModItem(
                        _,
                    ) => Ok(Self::ModItem(ModItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::StaticItem(
                        _,
                    ) => {
                        Ok(
                            Self::StaticItem(
                                StaticItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::StructItem(
                        _,
                    ) => {
                        Ok(
                            Self::StructItem(
                                StructItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::TraitItem(
                        _,
                    ) => {
                        Ok(
                            Self::TraitItem(
                                TraitItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::TypeItem(
                        _,
                    ) => Ok(Self::TypeItem(TypeItem::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::UnionItem(
                        _,
                    ) => {
                        Ok(
                            Self::UnionItem(
                                UnionItem::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::DeclarationStatementRef::UseDeclaration(
                        _,
                    ) => {
                        Ok(
                            Self::UseDeclaration(
                                UseDeclaration::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum Expression {
        ArrayExpression(ArrayExpression),
        AssignmentExpression(AssignmentExpression),
        AsyncBlock(AsyncBlock),
        AwaitExpression(AwaitExpression),
        BinaryExpression(BinaryExpression),
        Block(Block),
        BooleanLiteral(BooleanLiteral),
        BreakExpression(BreakExpression),
        CallExpression(CallExpression),
        CharLiteral(CharLiteral),
        ClosureExpression(ClosureExpression),
        CompoundAssignmentExpr(CompoundAssignmentExpr),
        ConstBlock(ConstBlock),
        ContinueExpression(ContinueExpression),
        FieldExpression(FieldExpression),
        FloatLiteral(FloatLiteral),
        ForExpression(ForExpression),
        GenBlock(GenBlock),
        GenericFunction(GenericFunction),
        Identifier(Identifier),
        IfExpression(IfExpression),
        IndexExpression(IndexExpression),
        IntegerLiteral(IntegerLiteral),
        LoopExpression(LoopExpression),
        MacroInvocation(MacroInvocation),
        MatchExpression(MatchExpression),
        Metavariable(Metavariable),
        ParenthesizedExpression(ParenthesizedExpression),
        RangeExpression(RangeExpression),
        RawStringLiteral(RawStringLiteral),
        ReferenceExpression(ReferenceExpression),
        ReturnExpression(ReturnExpression),
        ScopedIdentifier(ScopedIdentifier),
        SelfNode(SelfNode),
        StringLiteral(StringLiteral),
        StructExpression(StructExpression),
        TryBlock(TryBlock),
        TryExpression(TryExpression),
        TupleExpression(TupleExpression),
        TypeCastExpression(TypeCastExpression),
        UnaryExpression(UnaryExpression),
        UnitExpression(UnitExpression),
        UnsafeBlock(UnsafeBlock),
        WhileExpression(WhileExpression),
        YieldExpression(YieldExpression),
    }
    impl Expression {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ArrayExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayExpression(
                                ArrayExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::AssignmentExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AssignmentExpression(
                                AssignmentExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::AsyncBlock(
                        _,
                    ) => {
                        Ok(
                            Self::AsyncBlock(
                                AsyncBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::AwaitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::AwaitExpression(
                                AwaitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::BinaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BinaryExpression(
                                BinaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::Block(
                        _,
                    ) => Ok(Self::Block(Block::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::BreakExpression(
                        _,
                    ) => {
                        Ok(
                            Self::BreakExpression(
                                BreakExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::CallExpression(
                        _,
                    ) => {
                        Ok(
                            Self::CallExpression(
                                CallExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ClosureExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ClosureExpression(
                                ClosureExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::CompoundAssignmentExpr(
                        _,
                    ) => {
                        Ok(
                            Self::CompoundAssignmentExpr(
                                CompoundAssignmentExpr::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ContinueExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ContinueExpression(
                                ContinueExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::FieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::FieldExpression(
                                FieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ForExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ForExpression(
                                ForExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::GenBlock(
                        _,
                    ) => Ok(Self::GenBlock(GenBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::GenericFunction(
                        _,
                    ) => {
                        Ok(
                            Self::GenericFunction(
                                GenericFunction::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::IfExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IfExpression(
                                IfExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::IndexExpression(
                        _,
                    ) => {
                        Ok(
                            Self::IndexExpression(
                                IndexExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::LoopExpression(
                        _,
                    ) => {
                        Ok(
                            Self::LoopExpression(
                                LoopExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::MatchExpression(
                        _,
                    ) => {
                        Ok(
                            Self::MatchExpression(
                                MatchExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ParenthesizedExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ParenthesizedExpression(
                                ParenthesizedExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::RangeExpression(
                        _,
                    ) => {
                        Ok(
                            Self::RangeExpression(
                                RangeExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ReferenceExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceExpression(
                                ReferenceExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ReturnExpression(
                        _,
                    ) => {
                        Ok(
                            Self::ReturnExpression(
                                ReturnExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::SelfNode(
                        _,
                    ) => Ok(Self::SelfNode(SelfNode::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::StructExpression(
                        _,
                    ) => {
                        Ok(
                            Self::StructExpression(
                                StructExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::TryBlock(
                        _,
                    ) => Ok(Self::TryBlock(TryBlock::new(py, id, codebase_arc.clone())?)),
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::TryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TryExpression(
                                TryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::TupleExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TupleExpression(
                                TupleExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::TypeCastExpression(
                        _,
                    ) => {
                        Ok(
                            Self::TypeCastExpression(
                                TypeCastExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::UnaryExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnaryExpression(
                                UnaryExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::UnitExpression(
                        _,
                    ) => {
                        Ok(
                            Self::UnitExpression(
                                UnitExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::UnsafeBlock(
                        _,
                    ) => {
                        Ok(
                            Self::UnsafeBlock(
                                UnsafeBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::WhileExpression(
                        _,
                    ) => {
                        Ok(
                            Self::WhileExpression(
                                WhileExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::ExpressionRef::YieldExpression(
                        _,
                    ) => {
                        Ok(
                            Self::YieldExpression(
                                YieldExpression::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum Literal {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        FloatLiteral(FloatLiteral),
        IntegerLiteral(IntegerLiteral),
        RawStringLiteral(RawStringLiteral),
        StringLiteral(StringLiteral),
    }
    impl Literal {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum LiteralPattern {
        BooleanLiteral(BooleanLiteral),
        CharLiteral(CharLiteral),
        FloatLiteral(FloatLiteral),
        IntegerLiteral(IntegerLiteral),
        NegativeLiteral(NegativeLiteral),
        RawStringLiteral(RawStringLiteral),
        StringLiteral(StringLiteral),
    }
    impl LiteralPattern {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralPatternRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralPatternRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralPatternRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralPatternRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralPatternRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralPatternRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::LiteralPatternRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum Pattern {
        AnonymousUnderscore(AnonymousUnderscore),
        BooleanLiteral(BooleanLiteral),
        CapturedPattern(CapturedPattern),
        CharLiteral(CharLiteral),
        ConstBlock(ConstBlock),
        FloatLiteral(FloatLiteral),
        GenericPattern(GenericPattern),
        Identifier(Identifier),
        IntegerLiteral(IntegerLiteral),
        MacroInvocation(MacroInvocation),
        MutPattern(MutPattern),
        NegativeLiteral(NegativeLiteral),
        OrPattern(OrPattern),
        RangePattern(RangePattern),
        RawStringLiteral(RawStringLiteral),
        RefPattern(RefPattern),
        ReferencePattern(ReferencePattern),
        RemainingFieldPattern(RemainingFieldPattern),
        ScopedIdentifier(ScopedIdentifier),
        SlicePattern(SlicePattern),
        StringLiteral(StringLiteral),
        StructPattern(StructPattern),
        TuplePattern(TuplePattern),
        TupleStructPattern(TupleStructPattern),
    }
    impl Pattern {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::AnonymousUnderscore(
                        _,
                    ) => {
                        Ok(
                            Self::AnonymousUnderscore(
                                AnonymousUnderscore::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::BooleanLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::BooleanLiteral(
                                BooleanLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::CapturedPattern(
                        _,
                    ) => {
                        Ok(
                            Self::CapturedPattern(
                                CapturedPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::CharLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::CharLiteral(
                                CharLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::ConstBlock(
                        _,
                    ) => {
                        Ok(
                            Self::ConstBlock(
                                ConstBlock::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::FloatLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::FloatLiteral(
                                FloatLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::GenericPattern(
                        _,
                    ) => {
                        Ok(
                            Self::GenericPattern(
                                GenericPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::Identifier(
                        _,
                    ) => {
                        Ok(
                            Self::Identifier(
                                Identifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::IntegerLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::IntegerLiteral(
                                IntegerLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::MutPattern(
                        _,
                    ) => {
                        Ok(
                            Self::MutPattern(
                                MutPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::NegativeLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::NegativeLiteral(
                                NegativeLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::OrPattern(
                        _,
                    ) => {
                        Ok(
                            Self::OrPattern(
                                OrPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::RangePattern(
                        _,
                    ) => {
                        Ok(
                            Self::RangePattern(
                                RangePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::RawStringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::RawStringLiteral(
                                RawStringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::RefPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RefPattern(
                                RefPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::ReferencePattern(
                        _,
                    ) => {
                        Ok(
                            Self::ReferencePattern(
                                ReferencePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::RemainingFieldPattern(
                        _,
                    ) => {
                        Ok(
                            Self::RemainingFieldPattern(
                                RemainingFieldPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::ScopedIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedIdentifier(
                                ScopedIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::SlicePattern(
                        _,
                    ) => {
                        Ok(
                            Self::SlicePattern(
                                SlicePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::StringLiteral(
                        _,
                    ) => {
                        Ok(
                            Self::StringLiteral(
                                StringLiteral::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::StructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::StructPattern(
                                StructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::TuplePattern(
                        _,
                    ) => {
                        Ok(
                            Self::TuplePattern(
                                TuplePattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::PatternRef::TupleStructPattern(
                        _,
                    ) => {
                        Ok(
                            Self::TupleStructPattern(
                                TupleStructPattern::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    #[derive(IntoPyObject)]
    pub enum Type {
        AbstractType(AbstractType),
        ArrayType(ArrayType),
        BoundedType(BoundedType),
        DynamicType(DynamicType),
        FunctionType(FunctionType),
        GenericType(GenericType),
        MacroInvocation(MacroInvocation),
        Metavariable(Metavariable),
        NeverType(NeverType),
        PointerType(PointerType),
        PrimitiveType(PrimitiveType),
        ReferenceType(ReferenceType),
        RemovedTraitBound(RemovedTraitBound),
        ScopedTypeIdentifier(ScopedTypeIdentifier),
        TupleType(TupleType),
        TypeIdentifier(TypeIdentifier),
        UnitType(UnitType),
    }
    impl Type {
        pub fn new(
            py: Python<'_>,
            id: codegen_sdk_common::CSTNodeTreeId,
            codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
        ) -> PyResult<Self> {
            let codebase = codebase_arc.get(py);
            let path = id.file(codebase.db());
            let file = codebase.get_file_for_id(path);
            let file = match file {
                Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
                _ => {
                    return Err(
                        pyo3::exceptions::PyValueError::new_err(
                            format!(
                                "File not found for path: {}", path.path(codebase.db())
                                .display()
                            ),
                        ),
                    );
                }
            };
            let node = file.tree(codebase.db()).get(id.id(codebase.db()));
            if let Some(node) = node {
                match node.as_ref().try_into().unwrap() {
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::AbstractType(
                        _,
                    ) => {
                        Ok(
                            Self::AbstractType(
                                AbstractType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::ArrayType(
                        _,
                    ) => {
                        Ok(
                            Self::ArrayType(
                                ArrayType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::BoundedType(
                        _,
                    ) => {
                        Ok(
                            Self::BoundedType(
                                BoundedType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::DynamicType(
                        _,
                    ) => {
                        Ok(
                            Self::DynamicType(
                                DynamicType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::FunctionType(
                        _,
                    ) => {
                        Ok(
                            Self::FunctionType(
                                FunctionType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::GenericType(
                        _,
                    ) => {
                        Ok(
                            Self::GenericType(
                                GenericType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::MacroInvocation(
                        _,
                    ) => {
                        Ok(
                            Self::MacroInvocation(
                                MacroInvocation::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::Metavariable(
                        _,
                    ) => {
                        Ok(
                            Self::Metavariable(
                                Metavariable::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::NeverType(
                        _,
                    ) => {
                        Ok(
                            Self::NeverType(
                                NeverType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::PointerType(
                        _,
                    ) => {
                        Ok(
                            Self::PointerType(
                                PointerType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::PrimitiveType(
                        _,
                    ) => {
                        Ok(
                            Self::PrimitiveType(
                                PrimitiveType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::ReferenceType(
                        _,
                    ) => {
                        Ok(
                            Self::ReferenceType(
                                ReferenceType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::RemovedTraitBound(
                        _,
                    ) => {
                        Ok(
                            Self::RemovedTraitBound(
                                RemovedTraitBound::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::ScopedTypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::ScopedTypeIdentifier(
                                ScopedTypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::TupleType(
                        _,
                    ) => {
                        Ok(
                            Self::TupleType(
                                TupleType::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::TypeIdentifier(
                        _,
                    ) => {
                        Ok(
                            Self::TypeIdentifier(
                                TypeIdentifier::new(py, id, codebase_arc.clone())?,
                            ),
                        )
                    }
                    codegen_sdk_analyzer::codegen_sdk_rust::cst::TypeRef::UnitType(_) => {
                        Ok(Self::UnitType(UnitType::new(py, id, codebase_arc.clone())?))
                    }
                }
            } else {
                Err(pyo3::exceptions::PyValueError::new_err("Node not found"))
            }
        }
    }
    pub fn register_cst(parent_module: &Bound<'_, PyModule>) -> PyResult<()> {
        let child_module = PyModule::new(parent_module.py(), "cst")?;
        child_module.add_class::<AbstractType>()?;
        child_module.add_class::<AnonymousAmpersand>()?;
        child_module.add_class::<AnonymousAmpersandAmpersand>()?;
        child_module.add_class::<AnonymousAmpersandEquals>()?;
        child_module.add_class::<AnonymousAs>()?;
        child_module.add_class::<AnonymousAsterisk>()?;
        child_module.add_class::<AnonymousAsteriskEquals>()?;
        child_module.add_class::<AnonymousAsteriskSlash>()?;
        child_module.add_class::<AnonymousAsync>()?;
        child_module.add_class::<AnonymousAt>()?;
        child_module.add_class::<AnonymousAwait>()?;
        child_module.add_class::<AnonymousBang>()?;
        child_module.add_class::<AnonymousBangEquals>()?;
        child_module.add_class::<AnonymousBlock>()?;
        child_module.add_class::<AnonymousBreak>()?;
        child_module.add_class::<AnonymousCaret>()?;
        child_module.add_class::<AnonymousCaretEquals>()?;
        child_module.add_class::<AnonymousCloseBrace>()?;
        child_module.add_class::<AnonymousCloseBracket>()?;
        child_module.add_class::<AnonymousCloseParen>()?;
        child_module.add_class::<AnonymousColon>()?;
        child_module.add_class::<AnonymousColonColon>()?;
        child_module.add_class::<AnonymousComma>()?;
        child_module.add_class::<AnonymousConst>()?;
        child_module.add_class::<AnonymousContinue>()?;
        child_module.add_class::<AnonymousDefault>()?;
        child_module.add_class::<AnonymousDollar>()?;
        child_module.add_class::<AnonymousDot>()?;
        child_module.add_class::<AnonymousDotDot>()?;
        child_module.add_class::<AnonymousDotDotDot>()?;
        child_module.add_class::<AnonymousDotDotEquals>()?;
        child_module.add_class::<AnonymousDoubleQuote>()?;
        child_module.add_class::<AnonymousDyn>()?;
        child_module.add_class::<AnonymousElse>()?;
        child_module.add_class::<AnonymousEnum>()?;
        child_module.add_class::<AnonymousEquals>()?;
        child_module.add_class::<AnonymousEqualsEquals>()?;
        child_module.add_class::<AnonymousEqualsGreaterThan>()?;
        child_module.add_class::<AnonymousExpr>()?;
        child_module.add_class::<AnonymousExpr2021>()?;
        child_module.add_class::<AnonymousExtern>()?;
        child_module.add_class::<AnonymousFalse>()?;
        child_module.add_class::<AnonymousFn>()?;
        child_module.add_class::<AnonymousFor>()?;
        child_module.add_class::<AnonymousGen>()?;
        child_module.add_class::<AnonymousGreaterThan>()?;
        child_module.add_class::<AnonymousGreaterThanEquals>()?;
        child_module.add_class::<AnonymousGreaterThanGreaterThan>()?;
        child_module.add_class::<AnonymousGreaterThanGreaterThanEquals>()?;
        child_module.add_class::<AnonymousHash>()?;
        child_module.add_class::<AnonymousIdent>()?;
        child_module.add_class::<AnonymousIf>()?;
        child_module.add_class::<AnonymousImpl>()?;
        child_module.add_class::<AnonymousIn>()?;
        child_module.add_class::<AnonymousItem>()?;
        child_module.add_class::<AnonymousLessThan>()?;
        child_module.add_class::<AnonymousLessThanEquals>()?;
        child_module.add_class::<AnonymousLessThanLessThan>()?;
        child_module.add_class::<AnonymousLessThanLessThanEquals>()?;
        child_module.add_class::<AnonymousLet>()?;
        child_module.add_class::<AnonymousLifetime>()?;
        child_module.add_class::<AnonymousLiteral>()?;
        child_module.add_class::<AnonymousLoop>()?;
        child_module.add_class::<AnonymousMacroRulesBang>()?;
        child_module.add_class::<AnonymousMatch>()?;
        child_module.add_class::<AnonymousMeta>()?;
        child_module.add_class::<AnonymousMinus>()?;
        child_module.add_class::<AnonymousMinusEquals>()?;
        child_module.add_class::<AnonymousMinusGreaterThan>()?;
        child_module.add_class::<AnonymousMod>()?;
        child_module.add_class::<AnonymousMove>()?;
        child_module.add_class::<AnonymousOpenBrace>()?;
        child_module.add_class::<AnonymousOpenBracket>()?;
        child_module.add_class::<AnonymousOpenParen>()?;
        child_module.add_class::<AnonymousPat>()?;
        child_module.add_class::<AnonymousPatParam>()?;
        child_module.add_class::<AnonymousPath>()?;
        child_module.add_class::<AnonymousPercent>()?;
        child_module.add_class::<AnonymousPercentEquals>()?;
        child_module.add_class::<AnonymousPipe>()?;
        child_module.add_class::<AnonymousPipeEquals>()?;
        child_module.add_class::<AnonymousPipePipe>()?;
        child_module.add_class::<AnonymousPlus>()?;
        child_module.add_class::<AnonymousPlusEquals>()?;
        child_module.add_class::<AnonymousPub>()?;
        child_module.add_class::<AnonymousQuestionMark>()?;
        child_module.add_class::<AnonymousRaw>()?;
        child_module.add_class::<AnonymousRef>()?;
        child_module.add_class::<AnonymousReturn>()?;
        child_module.add_class::<AnonymousSemicolon>()?;
        child_module.add_class::<AnonymousSingleQuote>()?;
        child_module.add_class::<AnonymousSlash>()?;
        child_module.add_class::<AnonymousSlashAsterisk>()?;
        child_module.add_class::<AnonymousSlashEquals>()?;
        child_module.add_class::<AnonymousSlashSlash>()?;
        child_module.add_class::<AnonymousStatic>()?;
        child_module.add_class::<AnonymousStmt>()?;
        child_module.add_class::<AnonymousStruct>()?;
        child_module.add_class::<AnonymousTrait>()?;
        child_module.add_class::<AnonymousTrue>()?;
        child_module.add_class::<AnonymousTry>()?;
        child_module.add_class::<AnonymousTt>()?;
        child_module.add_class::<AnonymousTy>()?;
        child_module.add_class::<AnonymousType>()?;
        child_module.add_class::<AnonymousUnderscore>()?;
        child_module.add_class::<AnonymousUnion>()?;
        child_module.add_class::<AnonymousUnsafe>()?;
        child_module.add_class::<AnonymousUse>()?;
        child_module.add_class::<AnonymousVis>()?;
        child_module.add_class::<AnonymousWhere>()?;
        child_module.add_class::<AnonymousWhile>()?;
        child_module.add_class::<AnonymousYield>()?;
        child_module.add_class::<Arguments>()?;
        child_module.add_class::<ArrayExpression>()?;
        child_module.add_class::<ArrayType>()?;
        child_module.add_class::<AssignmentExpression>()?;
        child_module.add_class::<AssociatedType>()?;
        child_module.add_class::<AsyncBlock>()?;
        child_module.add_class::<Attribute>()?;
        child_module.add_class::<AttributeItem>()?;
        child_module.add_class::<AwaitExpression>()?;
        child_module.add_class::<BaseFieldInitializer>()?;
        child_module.add_class::<BinaryExpression>()?;
        child_module.add_class::<Block>()?;
        child_module.add_class::<BlockComment>()?;
        child_module.add_class::<BooleanLiteral>()?;
        child_module.add_class::<BoundedType>()?;
        child_module.add_class::<BracketedType>()?;
        child_module.add_class::<BreakExpression>()?;
        child_module.add_class::<CallExpression>()?;
        child_module.add_class::<CapturedPattern>()?;
        child_module.add_class::<CharLiteral>()?;
        child_module.add_class::<ClosureExpression>()?;
        child_module.add_class::<ClosureParameters>()?;
        child_module.add_class::<CompoundAssignmentExpr>()?;
        child_module.add_class::<ConstBlock>()?;
        child_module.add_class::<ConstItem>()?;
        child_module.add_class::<ConstParameter>()?;
        child_module.add_class::<ContinueExpression>()?;
        child_module.add_class::<Crate>()?;
        child_module.add_class::<DeclarationList>()?;
        child_module.add_class::<DocComment>()?;
        child_module.add_class::<DynamicType>()?;
        child_module.add_class::<ElseClause>()?;
        child_module.add_class::<EmptyStatement>()?;
        child_module.add_class::<EnumItem>()?;
        child_module.add_class::<EnumVariant>()?;
        child_module.add_class::<EnumVariantList>()?;
        child_module.add_class::<EscapeSequence>()?;
        child_module.add_class::<ExpressionStatement>()?;
        child_module.add_class::<ExternCrateDeclaration>()?;
        child_module.add_class::<ExternModifier>()?;
        child_module.add_class::<FieldDeclaration>()?;
        child_module.add_class::<FieldDeclarationList>()?;
        child_module.add_class::<FieldExpression>()?;
        child_module.add_class::<FieldIdentifier>()?;
        child_module.add_class::<FieldInitializer>()?;
        child_module.add_class::<FieldInitializerList>()?;
        child_module.add_class::<FieldPattern>()?;
        child_module.add_class::<FloatLiteral>()?;
        child_module.add_class::<ForExpression>()?;
        child_module.add_class::<ForLifetimes>()?;
        child_module.add_class::<ForeignModItem>()?;
        child_module.add_class::<FragmentSpecifier>()?;
        child_module.add_class::<FunctionItem>()?;
        child_module.add_class::<FunctionModifiers>()?;
        child_module.add_class::<FunctionSignatureItem>()?;
        child_module.add_class::<FunctionType>()?;
        child_module.add_class::<GenBlock>()?;
        child_module.add_class::<GenericFunction>()?;
        child_module.add_class::<GenericPattern>()?;
        child_module.add_class::<GenericType>()?;
        child_module.add_class::<GenericTypeWithTurbofish>()?;
        child_module.add_class::<HigherRankedTraitBound>()?;
        child_module.add_class::<Identifier>()?;
        child_module.add_class::<IfExpression>()?;
        child_module.add_class::<ImplItem>()?;
        child_module.add_class::<IndexExpression>()?;
        child_module.add_class::<InnerAttributeItem>()?;
        child_module.add_class::<InnerDocCommentMarker>()?;
        child_module.add_class::<IntegerLiteral>()?;
        child_module.add_class::<Label>()?;
        child_module.add_class::<LetChain>()?;
        child_module.add_class::<LetCondition>()?;
        child_module.add_class::<LetDeclaration>()?;
        child_module.add_class::<Lifetime>()?;
        child_module.add_class::<LifetimeParameter>()?;
        child_module.add_class::<LineComment>()?;
        child_module.add_class::<LoopExpression>()?;
        child_module.add_class::<MacroDefinition>()?;
        child_module.add_class::<MacroInvocation>()?;
        child_module.add_class::<MacroRule>()?;
        child_module.add_class::<MatchArm>()?;
        child_module.add_class::<MatchBlock>()?;
        child_module.add_class::<MatchExpression>()?;
        child_module.add_class::<MatchPattern>()?;
        child_module.add_class::<Metavariable>()?;
        child_module.add_class::<ModItem>()?;
        child_module.add_class::<MutPattern>()?;
        child_module.add_class::<MutableSpecifier>()?;
        child_module.add_class::<NegativeLiteral>()?;
        child_module.add_class::<NeverType>()?;
        child_module.add_class::<OrPattern>()?;
        child_module.add_class::<OrderedFieldDeclarationList>()?;
        child_module.add_class::<OuterDocCommentMarker>()?;
        child_module.add_class::<Parameter>()?;
        child_module.add_class::<Parameters>()?;
        child_module.add_class::<ParenthesizedExpression>()?;
        child_module.add_class::<PointerType>()?;
        child_module.add_class::<PrimitiveType>()?;
        child_module.add_class::<QualifiedType>()?;
        child_module.add_class::<RangeExpression>()?;
        child_module.add_class::<RangePattern>()?;
        child_module.add_class::<RawStringLiteral>()?;
        child_module.add_class::<RefPattern>()?;
        child_module.add_class::<ReferenceExpression>()?;
        child_module.add_class::<ReferencePattern>()?;
        child_module.add_class::<ReferenceType>()?;
        child_module.add_class::<RemainingFieldPattern>()?;
        child_module.add_class::<RemovedTraitBound>()?;
        child_module.add_class::<ReturnExpression>()?;
        child_module.add_class::<ScopedIdentifier>()?;
        child_module.add_class::<ScopedTypeIdentifier>()?;
        child_module.add_class::<ScopedUseList>()?;
        child_module.add_class::<SelfNode>()?;
        child_module.add_class::<SelfParameter>()?;
        child_module.add_class::<Shebang>()?;
        child_module.add_class::<ShorthandFieldIdentifier>()?;
        child_module.add_class::<ShorthandFieldInitializer>()?;
        child_module.add_class::<SlicePattern>()?;
        child_module.add_class::<SourceFile>()?;
        child_module.add_class::<StaticItem>()?;
        child_module.add_class::<StringContent>()?;
        child_module.add_class::<StringLiteral>()?;
        child_module.add_class::<StructExpression>()?;
        child_module.add_class::<StructItem>()?;
        child_module.add_class::<StructPattern>()?;
        child_module.add_class::<Super>()?;
        child_module.add_class::<TokenBindingPattern>()?;
        child_module.add_class::<TokenRepetition>()?;
        child_module.add_class::<TokenRepetitionPattern>()?;
        child_module.add_class::<TokenTree>()?;
        child_module.add_class::<TokenTreePattern>()?;
        child_module.add_class::<TraitBounds>()?;
        child_module.add_class::<TraitItem>()?;
        child_module.add_class::<TryBlock>()?;
        child_module.add_class::<TryExpression>()?;
        child_module.add_class::<TupleExpression>()?;
        child_module.add_class::<TuplePattern>()?;
        child_module.add_class::<TupleStructPattern>()?;
        child_module.add_class::<TupleType>()?;
        child_module.add_class::<TypeArguments>()?;
        child_module.add_class::<TypeBinding>()?;
        child_module.add_class::<TypeCastExpression>()?;
        child_module.add_class::<TypeIdentifier>()?;
        child_module.add_class::<TypeItem>()?;
        child_module.add_class::<TypeParameter>()?;
        child_module.add_class::<TypeParameters>()?;
        child_module.add_class::<UnaryExpression>()?;
        child_module.add_class::<UnionItem>()?;
        child_module.add_class::<UnitExpression>()?;
        child_module.add_class::<UnitType>()?;
        child_module.add_class::<UnsafeBlock>()?;
        child_module.add_class::<UseAsClause>()?;
        child_module.add_class::<UseBounds>()?;
        child_module.add_class::<UseDeclaration>()?;
        child_module.add_class::<UseList>()?;
        child_module.add_class::<UseWildcard>()?;
        child_module.add_class::<VariadicParameter>()?;
        child_module.add_class::<VisibilityModifier>()?;
        child_module.add_class::<WhereClause>()?;
        child_module.add_class::<WherePredicate>()?;
        child_module.add_class::<WhileExpression>()?;
        child_module.add_class::<YieldExpression>()?;
        parent_module.add_submodule(&child_module)?;
        Ok(())
    }
}
#[derive(IntoPyObject)]
pub enum Symbol {
    Class(Class),
    Function(Function),
    Interface(Interface),
    Macro(Macro),
    Method(Method),
    Module(Module),
}
impl Symbol {
    pub fn new(
        py: Python<'_>,
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        node: &codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol<'_>,
        codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        match node {
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Class(_) => {
                Self::Class(Class::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Function(_) => {
                Self::Function(Function::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Interface(_) => {
                Self::Interface(Interface::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Macro(_) => {
                Self::Macro(Macro::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Method(_) => {
                Self::Method(Method::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Module(_) => {
                Self::Module(Module::new(id, idx, codebase_arc))
            }
        }
    }
}
#[derive(IntoPyObject)]
pub enum Reference {
    Call(Call),
    ImplementationRef(ImplementationRef),
}
impl Reference {
    pub fn new(
        py: Python<'_>,
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        node: &codegen_sdk_analyzer::codegen_sdk_rust::ast::Reference<'_>,
        codebase_arc: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        match node {
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Reference::Call(_) => {
                Self::Call(Call::new(id, idx, codebase_arc))
            }
            codegen_sdk_analyzer::codegen_sdk_rust::ast::Reference::ImplementationRef(
                _,
            ) => Self::ImplementationRef(ImplementationRef::new(id, idx, codebase_arc)),
        }
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct Class {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Class {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::Class<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .classes(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Class {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::TypeItem> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::TypeItem::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::TypeIdentifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::TypeIdentifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let val = self.get(py)?;
        let wrapped = codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Class(*val);
        let db = self.codebase.get(py).db();
        let references = wrapped.references(db);
        Ok(
            references
                .into_iter()
                .map(|reference| Reference::new(
                    py.clone(),
                    reference.fully_qualified_name(db),
                    0,
                    &reference,
                    self.codebase.clone(),
                ))
                .collect(),
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct Function {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Function {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::Function<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .functions(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Function {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::FunctionItem> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::FunctionItem::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let val = self.get(py)?;
        let wrapped = codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Function(
            *val,
        );
        let db = self.codebase.get(py).db();
        let references = wrapped.references(db);
        Ok(
            references
                .into_iter()
                .map(|reference| Reference::new(
                    py.clone(),
                    reference.fully_qualified_name(db),
                    0,
                    &reference,
                    self.codebase.clone(),
                ))
                .collect(),
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct Interface {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Interface {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::Interface<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .interfaces(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Interface {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::TraitItem> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::TraitItem::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::TypeIdentifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::TypeIdentifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let val = self.get(py)?;
        let wrapped = codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Interface(
            *val,
        );
        let db = self.codebase.get(py).db();
        let references = wrapped.references(db);
        Ok(
            references
                .into_iter()
                .map(|reference| Reference::new(
                    py.clone(),
                    reference.fully_qualified_name(db),
                    0,
                    &reference,
                    self.codebase.clone(),
                ))
                .collect(),
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct Macro {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Macro {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::Macro<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .macros(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Macro {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::MacroDefinition> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::MacroDefinition::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let val = self.get(py)?;
        let wrapped = codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Macro(*val);
        let db = self.codebase.get(py).db();
        let references = wrapped.references(db);
        Ok(
            references
                .into_iter()
                .map(|reference| Reference::new(
                    py.clone(),
                    reference.fully_qualified_name(db),
                    0,
                    &reference,
                    self.codebase.clone(),
                ))
                .collect(),
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct Method {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Method {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::Method<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .methods(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Method {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::DeclarationList> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::DeclarationList::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let val = self.get(py)?;
        let wrapped = codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Method(*val);
        let db = self.codebase.get(py).db();
        let references = wrapped.references(db);
        Ok(
            references
                .into_iter()
                .map(|reference| Reference::new(
                    py.clone(),
                    reference.fully_qualified_name(db),
                    0,
                    &reference,
                    self.codebase.clone(),
                ))
                .collect(),
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct Module {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Module {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::Module<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .definitions(codebase.db())
            .modules(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Module {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::ModItem> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::ModItem::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
    #[getter]
    pub fn references(&self, py: Python<'_>) -> PyResult<Vec<Reference>> {
        let val = self.get(py)?;
        let wrapped = codegen_sdk_analyzer::codegen_sdk_rust::ast::Symbol::Module(*val);
        let db = self.codebase.get(py).db();
        let references = wrapped.references(db);
        Ok(
            references
                .into_iter()
                .map(|reference| Reference::new(
                    py.clone(),
                    reference.fully_qualified_name(db),
                    0,
                    &reference,
                    self.codebase.clone(),
                ))
                .collect(),
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct Call {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl Call {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<&'db codegen_sdk_analyzer::codegen_sdk_rust::ast::Call<'db>> {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .references(codebase.db())
            .calls(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl Call {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::MacroInvocation> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::MacroInvocation::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::Identifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::Identifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
}
#[pyclass(module = "codegen_sdk_pink.rust")]
pub struct ImplementationRef {
    id: codegen_sdk_resolution::FullyQualifiedName,
    idx: usize,
    codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
}
impl ImplementationRef {
    pub fn new(
        id: codegen_sdk_resolution::FullyQualifiedName,
        idx: usize,
        codebase: Arc<GILProtected<codegen_sdk_analyzer::Codebase>>,
    ) -> Self {
        Self { id, idx, codebase }
    }
    fn get<'db>(
        &'db self,
        py: Python<'db>,
    ) -> PyResult<
        &'db codegen_sdk_analyzer::codegen_sdk_rust::ast::ImplementationRef<'db>,
    > {
        let codebase = self.codebase.get(py);
        let path = self.id.file(codebase.db());
        let file = codebase.get_file_for_id(path);
        let file = match file {
            Some(codegen_sdk_analyzer::ParsedFile::Rust(py)) => py,
            _ => {
                return Err(
                    pyo3::exceptions::PyValueError::new_err(
                        format!(
                            "File not found for path: {}", path.path(codebase.db())
                            .display()
                        ),
                    ),
                );
            }
        };
        let name = self.id.name(codebase.db());
        let node = file
            .references(codebase.db())
            .implementations(codebase.db())
            .get(name)
            .unwrap();
        node.get(self.idx)
            .ok_or(pyo3::exceptions::PyValueError::new_err("Index out of bounds"))
    }
}
#[pymethods]
impl ImplementationRef {
    pub fn ts_node(&self, py: Python<'_>) -> PyResult<cst::ImplItem> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(cst::ImplItem::new(py, node.node_id(db), self.codebase.clone())?)
    }
    fn source(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let db = self.codebase.get(py).db();
        let node = self.get(py)?.node(db);
        Ok(node.source())
    }
    fn __str__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        Ok(self.source(py)?)
    }
    fn __repr__(&self, py: Python<'_>) -> PyResult<std::string::String> {
        let node = self.get(py)?;
        let codebase = self.codebase.get(py);
        codebase.attach(|_db| { Ok(format!("{node:#?}")) })
    }
    #[getter]
    pub fn name(&self, py: Python<'_>) -> PyResult<cst::TypeIdentifier> {
        let node = self.get(py)?;
        let db = self.codebase.get(py).db();
        Ok(
            cst::TypeIdentifier::new(
                py.clone(),
                node._name(db).clone(),
                self.codebase.clone(),
            )?,
        )
    }
}
pub fn register_rust(
    py: Python<'_>,
    parent_module: &Bound<'_, PyModule>,
) -> PyResult<()> {
    let child_module = PyModule::new(parent_module.py(), "rust")?;
    child_module.add_class::<RustFile>()?;
    child_module.add_class::<Class>()?;
    child_module.add_class::<Function>()?;
    child_module.add_class::<Interface>()?;
    child_module.add_class::<Macro>()?;
    child_module.add_class::<Method>()?;
    child_module.add_class::<Module>()?;
    child_module.add_class::<Call>()?;
    child_module.add_class::<ImplementationRef>()?;
    parent_module.add_submodule(&child_module)?;
    cst::register_cst(&child_module)?;
    py.import("sys")?
        .getattr("modules")?
        .set_item("codegen_sdk_pink.rust", child_module)?;
    Ok(())
}
